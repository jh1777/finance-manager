{
    "pipes": [],
    "interfaces": [
        {
            "name": "Array",
            "id": "interface-Array-12bb51bfee4da8b540591f21773c5341",
            "file": "src/app/util/arrayExtensions.ts",
            "type": "interface",
            "sourceCode": "declare global {\n    export interface Array<T> {\n        SortDescending(prop: string): Array<T>;\n        SortAscending(prop: string): Array<T>;\n        First(): T;\n        Distinct(): Array<T>;\n    }\n}\n\nArray.prototype.SortDescending = function (prop: string) {\n    return this.sort((n1, n2) => {\n        if (n1[prop] > n2[prop]) { return -1; }\n        if (n1[prop] < n2[prop]) { return 1; }\n        return 0;\n      });\n}\n\nArray.prototype.SortAscending = function (prop: string) {\n    return this.sort((n1, n2) => {\n        if (n1[prop] < n2[prop]) { return -1; }\n        if (n1[prop] > n2[prop]) { return 1; }\n        return 0;\n      });\n}\n\nArray.prototype.Distinct = function ()  {\n    //return  [...new Set(this)];\n    return this.filter((value, index, self) => self.indexOf(value) === index);\n}\n\nArray.prototype.First = function () {\n    if (this && this.length > 0) {\n        return this[0]\n    } else {\n        return null;\n    }\n}\nexport { }",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "Distinct",
                    "args": [],
                    "optional": false,
                    "returnType": "Array<T>",
                    "typeParameters": [],
                    "line": 6
                },
                {
                    "name": "First",
                    "args": [],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 5
                },
                {
                    "name": "SortAscending",
                    "args": [
                        {
                            "name": "prop",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<T>",
                    "typeParameters": [],
                    "line": 4,
                    "jsdoctags": [
                        {
                            "name": "prop",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "SortDescending",
                    "args": [
                        {
                            "name": "prop",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<T>",
                    "typeParameters": [],
                    "line": 3,
                    "jsdoctags": [
                        {
                            "name": "prop",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Date",
            "id": "interface-Date-b68eea7d766cd700634879b67b20a449",
            "file": "src/app/util/dateExtensions.ts",
            "type": "interface",
            "sourceCode": "import './numberExtensions';\n\ndeclare global {\n    interface Date {\n      toPreferredStringFormat(): string;\n    }\n  }\n  \n  \nDate.prototype.toPreferredStringFormat = function() {\n    return this.getFullYear() + \"-\" + (1 + this.getMonth()).PadWithZero() + \"-\" +this.getDate().PadWithZero() + \" \" + this.getHours().PadWithZero() + \":\" + this.getMinutes().PadWithZero() + \":\" + this.getSeconds().PadWithZero();\n};\n\nexport { }\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "toPreferredStringFormat",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 5
                }
            ]
        },
        {
            "name": "Dictionary",
            "id": "interface-Dictionary-f78fd2ef2517c9f3ffcd4eea08d69b4c",
            "file": "src/app/util/dictionary.ts",
            "type": "interface",
            "sourceCode": "export interface Dictionary<T> {\n    [Key: string]: T;\n}",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-f78fd2ef2517c9f3ffcd4eea08d69b4c",
                    "args": [
                        {
                            "name": "Key",
                            "type": "string"
                        }
                    ],
                    "returnType": "T",
                    "line": 1
                }
            ],
            "kind": 159,
            "methods": []
        },
        {
            "name": "HasId",
            "id": "interface-HasId-1a00523e4a56d47d418bc17e6426bc16",
            "file": "src/app/services/api.service.ts",
            "type": "interface",
            "sourceCode": "import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { catchError, map, retry } from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  private service: string = \"gehalt\";\n  private url = `${environment.apiUrl}/${this.service}`;\n  \n  constructor(private httpClient: HttpClient) { }\n\n  private httpOptions = new HttpHeaders({\n    'Content-Type': 'application/json',\n    'Cache-Control': 'no-cache'\n  });\n     \n  setService(service: string) {\n    this.service = service;\n    this.url = `${environment.apiUrl}/${service}`;\n  }\n\n  getAllEntries<T>(): Observable<HttpResponse<T[]>> {\n    return this.httpClient.get<T[]>(\n      this.url, { observe: 'response' })\n      .pipe(\n        retry(1),\n        catchError(this.errorHandler)\n      );\n  }\n\n  // Get without HttpClientResponse\n  getEntries<T>(): Observable<T[]> {\n    return this.httpClient.get<T[]>(\n      this.url)\n      .pipe(\n        retry(1),\n        catchError(this.errorHandler)\n      );\n  }\n\n  getEntry<T extends HasId>(id: number): Observable<T[]> {\n    return this.httpClient.get<T[]>(\n      this.url, { observe: 'response' })\n      .pipe(\n        map(entries => entries.body.filter(entry => entry.id === id)),\n        retry(1),\n        catchError(this.errorHandler)\n      );\n  }\n\n  deleteEntry<T>(year: number, month: number): Observable<HttpResponse<T>> {\n    var removeUrl = `${this.url}/${year}/${month}`;\n    var result = this.httpClient.delete<T>(removeUrl, { headers: this.httpOptions, observe: 'response' })\n      .pipe(\n        catchError(this.errorHandler)\n      );\n\n    return result;\n  }\n\n  deleteEntryById<T>(id: number): Observable<HttpResponse<T>> {\n    var removeUrl = `${this.url}/${id}`;\n    var result = this.httpClient.delete<T>(removeUrl, { headers: this.httpOptions, observe: 'response' })\n      .pipe(\n        catchError(this.errorHandler)\n      );\n\n    return result;\n  }\n\n  createEntry<T>(model: T): Observable<HttpResponse<T>> {\n    var result = this.httpClient.post<T>(this.url, model, { headers: this.httpOptions, observe: 'response' })\n      .pipe(\n        catchError(this.errorHandler)\n      );\n    return result;\n  }\n\n  changeEntry<T>(id: number, model: T): Observable<HttpResponse<T>> {\n    var url = `${this.url}/${id}`;\n    var result = this.httpClient.put<T>(url, model, { headers: this.httpOptions, observe: 'response' })\n      .pipe(\n        catchError(this.errorHandler)\n      );\n    return result;\n  }\n\n  errorHandler(error: any) {\n    let errorMessage = '';\n    if(error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    //this.messageService.logError(errorMessage, true);\n    return throwError(errorMessage);\n  }\n\n}\n\ninterface HasId {\n  id: number;\n}",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 109
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IDatum",
            "id": "interface-IDatum-5a1168287dda2a5633270debb3c3d120",
            "file": "src/app/services/models/interfaces/IDatum.ts",
            "type": "interface",
            "sourceCode": "export interface IDatum\n{\n    Datum: string;\n}",
            "properties": [
                {
                    "name": "Datum",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IName",
            "id": "interface-IName-5eae90dc4a94f2768116ffbc7e9894c3",
            "file": "src/app/services/models/interfaces/IName.ts",
            "type": "interface",
            "sourceCode": "export interface IName\n{\n    Name: string;\n}",
            "properties": [
                {
                    "name": "Name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ITableCell",
            "id": "interface-ITableCell-dc50ed7168dfcb7e48f00a58c88d61ca",
            "file": "src/app/ui/models/table/ITableCell.ts",
            "type": "interface",
            "sourceCode": "export interface ITableCell {\n    label: string;\n    id?: number;\n    numericValue?: number;\n    actionIcon?: string;\n    action?: () => void;\n}",
            "properties": [
                {
                    "name": "action",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "actionIcon",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "numericValue",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Number",
            "id": "interface-Number-80d3f5e4103f5f7f134b8ba0d4df5098",
            "file": "src/app/util/numberExtensions.ts",
            "type": "interface",
            "sourceCode": "declare global {\n    export interface Number {\n        PadWithZero(): string;\n    }\n}\n\nNumber.prototype.PadWithZero = function (this: number) {\n    return this < 10 ? `0${this}` : `${this}`;\n}\nexport { }",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "PadWithZero",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 3
                }
            ]
        }
    ],
    "injectables": [
        {
            "name": "ApiService",
            "id": "injectable-ApiService-1a00523e4a56d47d418bc17e6426bc16",
            "file": "src/app/services/api.service.ts",
            "properties": [
                {
                    "name": "httpOptions",
                    "defaultValue": "new HttpHeaders({\n    'Content-Type': 'application/json',\n    'Cache-Control': 'no-cache'\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "service",
                    "defaultValue": "\"gehalt\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "url",
                    "defaultValue": "`${environment.apiUrl}/${this.service}`",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "changeEntry",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        },
                        {
                            "name": "model",
                            "type": "T"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 84,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "model",
                            "type": "T",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createEntry",
                    "args": [
                        {
                            "name": "model",
                            "type": "T"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 76,
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "T",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteEntry",
                    "args": [
                        {
                            "name": "year",
                            "type": "number"
                        },
                        {
                            "name": "month",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "year",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteEntryById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 66,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "errorHandler",
                    "args": [
                        {
                            "name": "error",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 93,
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllEntries",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<T[]>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 27
                },
                {
                    "name": "getEntries",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 37
                },
                {
                    "name": "getEntry",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setService",
                    "args": [
                        {
                            "name": "service",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "service",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { catchError, map, retry } from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  private service: string = \"gehalt\";\n  private url = `${environment.apiUrl}/${this.service}`;\n  \n  constructor(private httpClient: HttpClient) { }\n\n  private httpOptions = new HttpHeaders({\n    'Content-Type': 'application/json',\n    'Cache-Control': 'no-cache'\n  });\n     \n  setService(service: string) {\n    this.service = service;\n    this.url = `${environment.apiUrl}/${service}`;\n  }\n\n  getAllEntries<T>(): Observable<HttpResponse<T[]>> {\n    return this.httpClient.get<T[]>(\n      this.url, { observe: 'response' })\n      .pipe(\n        retry(1),\n        catchError(this.errorHandler)\n      );\n  }\n\n  // Get without HttpClientResponse\n  getEntries<T>(): Observable<T[]> {\n    return this.httpClient.get<T[]>(\n      this.url)\n      .pipe(\n        retry(1),\n        catchError(this.errorHandler)\n      );\n  }\n\n  getEntry<T extends HasId>(id: number): Observable<T[]> {\n    return this.httpClient.get<T[]>(\n      this.url, { observe: 'response' })\n      .pipe(\n        map(entries => entries.body.filter(entry => entry.id === id)),\n        retry(1),\n        catchError(this.errorHandler)\n      );\n  }\n\n  deleteEntry<T>(year: number, month: number): Observable<HttpResponse<T>> {\n    var removeUrl = `${this.url}/${year}/${month}`;\n    var result = this.httpClient.delete<T>(removeUrl, { headers: this.httpOptions, observe: 'response' })\n      .pipe(\n        catchError(this.errorHandler)\n      );\n\n    return result;\n  }\n\n  deleteEntryById<T>(id: number): Observable<HttpResponse<T>> {\n    var removeUrl = `${this.url}/${id}`;\n    var result = this.httpClient.delete<T>(removeUrl, { headers: this.httpOptions, observe: 'response' })\n      .pipe(\n        catchError(this.errorHandler)\n      );\n\n    return result;\n  }\n\n  createEntry<T>(model: T): Observable<HttpResponse<T>> {\n    var result = this.httpClient.post<T>(this.url, model, { headers: this.httpOptions, observe: 'response' })\n      .pipe(\n        catchError(this.errorHandler)\n      );\n    return result;\n  }\n\n  changeEntry<T>(id: number, model: T): Observable<HttpResponse<T>> {\n    var url = `${this.url}/${id}`;\n    var result = this.httpClient.put<T>(url, model, { headers: this.httpOptions, observe: 'response' })\n      .pipe(\n        catchError(this.errorHandler)\n      );\n    return result;\n  }\n\n  errorHandler(error: any) {\n    let errorMessage = '';\n    if(error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    //this.messageService.logError(errorMessage, true);\n    return throwError(errorMessage);\n  }\n\n}\n\ninterface HasId {\n  id: number;\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ModalService",
            "id": "injectable-ModalService-6b2f518550bc1420219e4a8f6d150318",
            "file": "src/app/modalModule/modal.service.ts",
            "properties": [
                {
                    "name": "modals",
                    "defaultValue": "[]",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "modal",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "modal",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ModalService {\n    private modals: any[] = [];\n\n    add(modal: any) {\n        // add modal to array of active modals\n        this.modals.push(modal);\n    }\n\n    remove(id: string) {\n        // remove modal from array of active modals\n        this.modals = this.modals.filter(x => x.id !== id);\n    }\n\n    open(id: string) {\n        // open modal specified by id\n        const modal = this.modals.find(x => x.id === id);\n        modal.open();\n    }\n\n    close(id: string) {\n        // close modal specified by id\n        const modal = this.modals.find(x => x.id === id);\n        modal.close();\n    }\n}",
            "type": "injectable"
        },
        {
            "name": "NavigationService",
            "id": "injectable-NavigationService-2a737215574e07d56d515ad78d528233",
            "file": "src/app/services/navigation.service.ts",
            "properties": [
                {
                    "name": "_navItems",
                    "defaultValue": "new Array<INavigationItem>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "activeMenu",
                    "defaultValue": "new Subject<number>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createNavigationItems",
                    "args": [],
                    "optional": false,
                    "returnType": "Array<INavigationItem>",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getNavigationItems",
                    "args": [],
                    "optional": false,
                    "returnType": "Array<INavigationItem>",
                    "typeParameters": [],
                    "line": 77,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { getIconWithName } from '../data/iconFactory';\nimport { INavigationItem } from '../ui/models/navigation-bar/INavigationItem';\nimport { LinkNavigationItem } from '../ui/models/navigation-bar/linkNavigationItem';\nimport { TextNavigationItem } from '../ui/models/navigation-bar/textNavigationItem';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationService {\n\n  //private _activeMenuId: number = -1;\n  private _navItems = new Array<INavigationItem>();\n\n\n  public activeMenu = new Subject<number>();\n\n  constructor() {\n    this._navItems = this.createNavigationItems();\n  }\n\n  private createNavigationItems(): Array<INavigationItem> {\n    let result = new Array<INavigationItem>();\n\n    // 0\n    let title = new TextNavigationItem({\n      label: \"Finance Manager\",\n      showBold: true\n    });\n    result.push(title);\n\n    // 1\n    let home = new LinkNavigationItem({\n      label: 'Home',\n      icon: getIconWithName('home-line'),\n      link: \"/overview\"\n    });\n    result.push(home);\n\n    // 2\n    let salary = new LinkNavigationItem({\n      label: 'Salary',\n      icon: getIconWithName('wallet-line'),\n      link: \"/salary\"\n    });\n    result.push(salary);\n\n    // 3\n    let insurance = new LinkNavigationItem({\n      label: 'Insurance',\n      icon: getIconWithName('shield-line'),\n      link: \"/insurance\"\n    });\n    result.push(insurance);\n\n    // 4\n    let expenses = new LinkNavigationItem({\n      label: 'Expenses',\n      icon: getIconWithName('briefcase-line'),\n      link: \"/expenses\"\n    });\n    result.push(expenses);\n\n    // 5\n    let settings = new LinkNavigationItem({\n      label: '',\n      icon: getIconWithName('cog-line'),\n      link: \"/settings\",\n      align: 'right'\n    });\n    result.push(settings);\n\n    return result;\n  }\n\n  public getNavigationItems(): Array<INavigationItem> {\n    return this._navItems;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 17
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "ActionNavigationItem",
            "id": "class-ActionNavigationItem-3278edbfa7ce25df6d940c13447d185c",
            "file": "src/app/ui/models/navigation-bar/actionNavigationItem.ts",
            "type": "class",
            "sourceCode": "import { INavigationItem } from \"./INavigationItem\";\n\nexport class ActionNavigationItem extends INavigationItem {\n    label: string;\n    icon?: string;\n    align: 'left' | 'right' = 'left';\n    isLinkItem: boolean = false;\n    isActionItem: boolean = true;\n    toActionItem = () => {\n      return this;\n    }\n    onClick?: () => void; \n\n    constructor(init?: Partial<ActionNavigationItem>) {\n      super(init);\n      Object.assign(this, init);\n    }\n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<ActionNavigationItem>",
                        "optional": true
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<ActionNavigationItem>",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "align",
                    "defaultValue": "'left'",
                    "type": "\"left\" | \"right\"",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "isActionItem",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "isLinkItem",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "onClick",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "toActionItem",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "align",
                    "type": "\"left\" | \"right\"",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "INavigationItem"
                    }
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "INavigationItem"
                    }
                },
                {
                    "name": "isActionItem",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "INavigationItem"
                    }
                },
                {
                    "name": "isLinkItem",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "inheritance": {
                        "file": "INavigationItem"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "INavigationItem"
                    }
                },
                {
                    "name": "toActionItem",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 11,
                    "inheritance": {
                        "file": "INavigationItem"
                    }
                },
                {
                    "name": "toLinkItem",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "INavigationItem"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "INavigationItem",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-ee2067dfb1c303f41003aea7d82d51e0",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Ausgabe",
            "id": "class-Ausgabe-f7ff17eca3c40cfb34f805aad9865fc5",
            "file": "src/app/services/models/ausgabe.ts",
            "type": "class",
            "sourceCode": "import { IName } from './interfaces/IName';\n\nexport class Ausgabe implements IName {\n    Name: string;\n    Betrag: number;\n    Beschreibung?: string;\n    Intervall: 'Monat' | 'Jahr' | 'Quartal' = 'Monat'\n    Kategorie?: string;\n    Tag?: string;\n    id?: number;\n    Start: string;\n    Ende: string;\n    Erstellt: string;\n    Bearbeitet: string;\n    Person: string;\n\n    constructor(init?: Partial<Ausgabe>) {\n        Object.assign(this, init);\n    }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Ausgabe>",
                        "optional": true
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Ausgabe>",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "Bearbeitet",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "Beschreibung",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "Betrag",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "Ende",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "Erstellt",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "Intervall",
                    "defaultValue": "'Monat'",
                    "type": "\"Monat\" | \"Jahr\" | \"Quartal\"",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "Kategorie",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "Name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "Person",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "Start",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "Tag",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IName"
            ]
        },
        {
            "name": "Button",
            "id": "class-Button-24b09f2f6404362b4a6e210b6e5f795a",
            "file": "src/app/ui/models/inline-button-group/button.ts",
            "type": "class",
            "sourceCode": "export class Button {\n    label: string;\n    id?: number;\n    isSelected?: boolean = false;\n\n    constructor(init? : Partial<Button>) {\n        Object.assign(this, init);\n    }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Button>",
                        "optional": true
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Button>",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "isSelected",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultStateItem",
            "id": "class-DefaultStateItem-fa2bad48fec3302828c501969d507a3f",
            "file": "src/app/ui/state-progress/model/defaultStateItem.ts",
            "type": "class",
            "sourceCode": "import { StateItem } from \"./stateItem\";\n\nexport class DefaultStateItem extends StateItem {\n    constructor(init?: Partial<DefaultStateItem>) {\n        super(init);\n    }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<DefaultStateItem>",
                        "optional": true
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<DefaultStateItem>",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "StateItem"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "StateItem"
                    }
                },
                {
                    "name": "state",
                    "defaultValue": "State.NONE",
                    "type": "State",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "StateItem"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "StateItem",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Describer",
            "id": "class-Describer-df999471078d1c3ff3d77791a4099274",
            "file": "src/app/util/objectDescriber.ts",
            "type": "class",
            "sourceCode": "export class Describer {\n    static describe<T>(instance: T): Array<string> {\n        return Object.getOwnPropertyNames(instance);\n    }\n}",
            "properties": [],
            "methods": [
                {
                    "name": "describe",
                    "args": [
                        {
                            "name": "instance",
                            "type": "T"
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<string>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 2,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "instance",
                            "type": "T",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Gehalt",
            "id": "class-Gehalt-a4e19e67b522d7c99695a3e2c34ccba0",
            "file": "src/app/services/models/gehalt.ts",
            "type": "class",
            "sourceCode": "export class Gehalt {\n  id: number;\n  Monat: number;\n  Jahr: number;\n  Brutto: number;\n  BruttoDiffPct: number;\n  Netto: number;\n  NettoDiffPct: number;\n  AKP?: number;\n  Kantine?: number;\n  Arbeitgeber: string;\n  Wochenstunden: number;\n\n  constructor(init?: Partial<Gehalt>) {\n    Object.assign(this, init);\n  }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Gehalt>",
                        "optional": true
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Gehalt>",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "AKP",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "Arbeitgeber",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "Brutto",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "BruttoDiffPct",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "Jahr",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "Kantine",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "Monat",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "Netto",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "NettoDiffPct",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "Wochenstunden",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GehaltTransformer",
            "id": "class-GehaltTransformer-59f097d39ad1b02d60fd0bb83402a690",
            "file": "src/app/data/gehaltTransformer.ts",
            "type": "class",
            "sourceCode": "import { Gehalt } from \"../services/models/gehalt\";\nimport { Dictionary } from \"../util/dictionary\";\n\nexport class GehaltTransformer {\n\n    /**\n     * Returns \"Gehalt\" lists grouped by \"Jahr\" as the key\n     * @param data Array<Gehalt>\n     * @returns  Dictionary<Array<Gehalt>>\n     */\n    public static groupByJahr(data: Array<Gehalt>): Dictionary<Array<Gehalt>> {\n        var result: Dictionary<Array<Gehalt>> = {};\n\n        let years = data.map(d => d.Jahr);\n        let yearsUnique = years.Distinct();\n\n        yearsUnique.forEach(y => {\n            let yearData = data.filter(d => d.Jahr === y);\n            result[y] = yearData;\n        })\n\n        return result;\n    }\n\n    public static calculateDiffs(data: Array<Gehalt>): Array<Gehalt> {\n        data.forEach(d => {\n            let prevYearGehalt = data.filter(d2 => d2.Jahr == d.Jahr - 1 && d2.Monat == d.Monat);\n            if (prevYearGehalt && prevYearGehalt.length == 1) {\n                d.BruttoDiffPct = (d.Brutto * 100) / prevYearGehalt[0].Brutto;\n                d.NettoDiffPct = (d.Netto * 100) / prevYearGehalt[0].Netto;\n            }\n        });\n        return data;\n    }\n\n    public static calculateYearDiffs(data: Array<Gehalt>, attribute: string): Dictionary<number> {\n        var result: Dictionary<number> = {};\n        let years = data.map(d => d.Jahr);\n        let yearsUnique = years.Distinct();\n\n        yearsUnique.forEach(y => {\n            let yearData = data.filter(d => d.Jahr === y);\n            let prevYearData = data.filter(d2 => d2.Jahr === y - 1);\n\n            let attrSum =  yearData.reduce((p, c) => p + c[attribute], 0);\n            let yearDataCount = yearData.length;\n\n            if (prevYearData && prevYearData.length > 0) {\n                let prevYearAttrSum = prevYearData.reduce((p, c) => p + c[attribute], 0);\n                let prevYearDataCount = prevYearData.length;\n                let factor = yearDataCount / prevYearDataCount;\n\n                result[y] = ((attrSum * 100) / (prevYearAttrSum * factor)) - 100;\n            } else {\n                console.error(`No previous year data found: ${y - 1}`);\n            }\n        })\n\n        return result;\n    }\n}\n\n",
            "properties": [],
            "methods": [
                {
                    "name": "calculateDiffs",
                    "args": [
                        {
                            "name": "data",
                            "type": "Array<Gehalt>"
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<Gehalt>",
                    "typeParameters": [],
                    "line": 25,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Array<Gehalt>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateYearDiffs",
                    "args": [
                        {
                            "name": "data",
                            "type": "Array<Gehalt>"
                        },
                        {
                            "name": "attribute",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Dictionary<number>",
                    "typeParameters": [],
                    "line": 36,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Array<Gehalt>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "attribute",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "groupByJahr",
                    "args": [
                        {
                            "name": "data",
                            "type": "Array<Gehalt>"
                        }
                    ],
                    "optional": false,
                    "returnType": "Dictionary<Array<Gehalt>>",
                    "typeParameters": [],
                    "line": 11,
                    "description": "<p>Returns &quot;Gehalt&quot; lists grouped by &quot;Jahr&quot; as the key</p>\n",
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 217,
                                "end": 221,
                                "flags": 0,
                                "escapedText": "data"
                            },
                            "type": "Array<Gehalt>",
                            "tagName": {
                                "pos": 211,
                                "end": 216,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Array<Gehalt></p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 244,
                                "end": 251,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Dictionary&lt;Array<Gehalt>&gt;</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GroupRow",
            "id": "class-GroupRow-f8a1e73684141c73affe13e6bcaf9c61",
            "file": "src/app/ui/models/table/groupRow.ts",
            "type": "class",
            "sourceCode": "import { TableRow } from \"./tableRow\";\n\nexport class GroupRow extends TableRow {\n    groupLabel: string;\n    itemCount: number;\n    isCollapsed: boolean = false;\n    summarizedData?: Array<number> = [];\n\n    constructor(init?: Partial<GroupRow>) {\n        super();\n        Object.assign(this, init);\n    }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<GroupRow>",
                        "optional": true
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<GroupRow>",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "groupLabel",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "isCollapsed",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "itemCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "summarizedData",
                    "defaultValue": "[]",
                    "type": "Array<number>",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "actions",
                    "defaultValue": "[]",
                    "type": "Array<TableRowAction>",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "TableRow"
                    }
                },
                {
                    "name": "cells",
                    "defaultValue": "[]",
                    "type": "Array<ITableCell>",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "TableRow"
                    }
                },
                {
                    "name": "hidden",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "TableRow"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "TableRow",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "INavigationItem",
            "id": "class-INavigationItem-d0851a3200f931c1930521fc3d89c71c",
            "file": "src/app/ui/models/navigation-bar/INavigationItem.ts",
            "type": "class",
            "sourceCode": "import { ActionNavigationItem } from \"./actionNavigationItem\";\nimport { LinkNavigationItem } from \"./linkNavigationItem\";\n\nexport abstract class INavigationItem {\n    label: string;\n    icon?: string;\n    align: 'left' | 'right';\n    isLinkItem: boolean;\n    isActionItem: boolean;\n    toLinkItem?: () => LinkNavigationItem;\n    toActionItem?: () => ActionNavigationItem;\n\n    constructor(init?: Partial<INavigationItem>) {\n      Object.assign(this, init);\n    }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<INavigationItem>",
                        "optional": true
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<INavigationItem>",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "align",
                    "type": "\"left\" | \"right\"",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "isActionItem",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "isLinkItem",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "toActionItem",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "toLinkItem",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LinkNavigationItem",
            "id": "class-LinkNavigationItem-ca0a616948604bc0fc34e08e8b560f50",
            "file": "src/app/ui/models/navigation-bar/linkNavigationItem.ts",
            "type": "class",
            "sourceCode": "import { INavigationItem } from \"./INavigationItem\";\n\nexport class LinkNavigationItem extends INavigationItem{\n    label: string;\n    icon?: string;\n    link: string;\n    isLinkItem: boolean = true;\n    isActionItem: boolean = false;\n    toLinkItem = () => {\n      return this;\n    }\n    align: 'left' | 'right' = 'left';\n    \n    constructor(init?: Partial<LinkNavigationItem>) {\n      super(init);\n      Object.assign(this, init);\n    }\n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<LinkNavigationItem>",
                        "optional": true
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<LinkNavigationItem>",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "align",
                    "defaultValue": "'left'",
                    "type": "\"left\" | \"right\"",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "isActionItem",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "isLinkItem",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "link",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "toLinkItem",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "align",
                    "type": "\"left\" | \"right\"",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "INavigationItem"
                    }
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "INavigationItem"
                    }
                },
                {
                    "name": "isActionItem",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "INavigationItem"
                    }
                },
                {
                    "name": "isLinkItem",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "inheritance": {
                        "file": "INavigationItem"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "INavigationItem"
                    }
                },
                {
                    "name": "toActionItem",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 11,
                    "inheritance": {
                        "file": "INavigationItem"
                    }
                },
                {
                    "name": "toLinkItem",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "INavigationItem"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "INavigationItem",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "NumberStateItem",
            "id": "class-NumberStateItem-6f5aec929a733e11f1d324c490e73e18",
            "file": "src/app/ui/state-progress/model/numberStateItem.ts",
            "type": "class",
            "sourceCode": "import { StateItem } from \"./stateItem\";\n\nexport class NumberStateItem extends StateItem {\n    value: number;\n    constructor(init?: Partial<NumberStateItem>) {\n        super(init);\n        Object.assign(this, init);\n    }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<NumberStateItem>",
                        "optional": true
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<NumberStateItem>",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "value",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "StateItem"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "StateItem"
                    }
                },
                {
                    "name": "state",
                    "defaultValue": "State.NONE",
                    "type": "State",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "StateItem"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "StateItem",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "NumberTableCell",
            "id": "class-NumberTableCell-686767380acc9016ec0aa4f251c53a64",
            "file": "src/app/ui/models/table/numberTableCell.ts",
            "type": "class",
            "sourceCode": "import { TextTableCell } from \"./textTableCell\";\n\nexport class NumberTableCell extends TextTableCell {\n    numericValue: number;\n\n    constructor(init?: Partial<NumberTableCell>) {\n        super(init);\n        Object.assign(this, init);\n    }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<NumberTableCell>",
                        "optional": true
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<NumberTableCell>",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "numericValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "action",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "TextTableCell"
                    }
                },
                {
                    "name": "actionIcon",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "TextTableCell"
                    }
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "TextTableCell"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "TextTableCell"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "TextTableCell",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SortEntry",
            "id": "class-SortEntry-7710a8303d8f048c25f3ecec632129ec",
            "file": "src/app/ui/models/table/sortEntry.ts",
            "type": "class",
            "sourceCode": "import { TableHeader } from \"./tableHeader\";\n\nexport class SortEntry {\n    direction: 'asc' | 'desc';\n    column: TableHeader;\n\n    constructor(init?: Partial<SortEntry>) {\n        Object.assign(this, init);\n    }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<SortEntry>",
                        "optional": true
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<SortEntry>",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "column",
                    "type": "TableHeader",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "direction",
                    "type": "\"asc\" | \"desc\"",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "StateItem",
            "id": "class-StateItem-143b5d78bc715d56ccf599a7fa045432",
            "file": "src/app/ui/state-progress/model/stateItem.ts",
            "type": "class",
            "sourceCode": "import { State } from \"./state\";\n\nexport abstract class StateItem {\n    state: State = State.NONE;\n    label: string;\n    description: string;\n\n    constructor(init?: Partial<StateItem>) {\n        Object.assign(this, init);\n    }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<StateItem>",
                        "optional": true
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<StateItem>",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "state",
                    "defaultValue": "State.NONE",
                    "type": "State",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "StyledTextTableCell",
            "id": "class-StyledTextTableCell-1fb76a0a0dbeca4e19e63f3b2c04a0e8",
            "file": "src/app/ui/models/table/styledTextTableCell.ts",
            "type": "class",
            "sourceCode": "import { TextTableCell } from \"./textTableCell\";\n\nexport class StyledTextTableCell extends TextTableCell {\n\n    style?: any = {};\n\n    constructor(init?: Partial<StyledTextTableCell>) {\n        super(init);\n        Object.assign(this, init);\n    }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<StyledTextTableCell>",
                        "optional": true
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<StyledTextTableCell>",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "style",
                    "defaultValue": "{}",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "action",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "TextTableCell"
                    }
                },
                {
                    "name": "actionIcon",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "TextTableCell"
                    }
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "TextTableCell"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "TextTableCell"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "TextTableCell",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TableHeader",
            "id": "class-TableHeader-f54d8a667f7133d08c62191280e06e3b",
            "file": "src/app/ui/models/table/tableHeader.ts",
            "type": "class",
            "sourceCode": "import { ITableCell } from \"./ITableCell\";\nexport class TableHeader implements ITableCell {\n    label: string;\n    isSortable?: boolean = false;\n    isGroupable?: boolean = false;\n    summarizeWhenGrouped?: boolean = false;\n\n    constructor(init?: Partial<TableHeader>) {\n        Object.assign(this, init);\n    }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<TableHeader>",
                        "optional": true
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<TableHeader>",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "isGroupable",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "isSortable",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "summarizeWhenGrouped",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ITableCell"
            ]
        },
        {
            "name": "TableRow",
            "id": "class-TableRow-539a92ece876ed181635a053eae64d75",
            "file": "src/app/ui/models/table/tableRow.ts",
            "type": "class",
            "sourceCode": "import { ITableCell } from \"./ITableCell\";\nimport { TableRowAction } from \"./tableRowAction\";\n\nexport class TableRow {\n    cells: Array<ITableCell> = [];\n    actions: Array<TableRowAction> = [];\n    hidden: boolean = false;\n}",
            "properties": [
                {
                    "name": "actions",
                    "defaultValue": "[]",
                    "type": "Array<TableRowAction>",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "cells",
                    "defaultValue": "[]",
                    "type": "Array<ITableCell>",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "hidden",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TableRowAction",
            "id": "class-TableRowAction-ade84f00495475b07c9d5abd08297bcd",
            "file": "src/app/ui/models/table/tableRowAction.ts",
            "type": "class",
            "sourceCode": "export class TableRowAction {\n    icon: string;\n    tooltip?: string;\n    action: (id: number) => void;\n}",
            "properties": [
                {
                    "name": "action",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "tooltip",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TableSpan",
            "id": "class-TableSpan-a450090526c4c49172a2662fc4100c3d",
            "file": "src/app/ui/models/table/tableSpan.ts",
            "type": "class",
            "sourceCode": "export class TableSpan {\n    columnsToSpan: number;\n    columnId: number;\n    constructor(init?: Partial<TableSpan>) {\n        Object.assign(this, init);\n    }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<TableSpan>",
                        "optional": true
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<TableSpan>",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "columnId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "columnsToSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TextNavigationItem",
            "id": "class-TextNavigationItem-84762cf2406aff55327e8298dd7d2d99",
            "file": "src/app/ui/models/navigation-bar/textNavigationItem.ts",
            "type": "class",
            "sourceCode": "import { INavigationItem } from \"./INavigationItem\";\n\nexport class TextNavigationItem extends INavigationItem{\n    label: string;\n    icon?: string;\n    align: 'left' | 'right' = 'left';\n    isLinkItem: boolean = false;\n    isActionItem: boolean = false;\n    showBold: boolean = false;\n\n    constructor(init?: Partial<TextNavigationItem>) {\n      super(init);\n      Object.assign(this, init);\n    }\n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<TextNavigationItem>",
                        "optional": true
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<TextNavigationItem>",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "align",
                    "defaultValue": "'left'",
                    "type": "\"left\" | \"right\"",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "isActionItem",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "isLinkItem",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "showBold",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "align",
                    "type": "\"left\" | \"right\"",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "INavigationItem"
                    }
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "INavigationItem"
                    }
                },
                {
                    "name": "isActionItem",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "INavigationItem"
                    }
                },
                {
                    "name": "isLinkItem",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "inheritance": {
                        "file": "INavigationItem"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "INavigationItem"
                    }
                },
                {
                    "name": "toActionItem",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 11,
                    "inheritance": {
                        "file": "INavigationItem"
                    }
                },
                {
                    "name": "toLinkItem",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "INavigationItem"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "INavigationItem",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TextTableCell",
            "id": "class-TextTableCell-6bd7f102177499a69a963ef24bf98eee",
            "file": "src/app/ui/models/table/textTableCell.ts",
            "type": "class",
            "sourceCode": "import { ITableCell } from \"./ITableCell\";\n\nexport class TextTableCell implements ITableCell {\n    label: string;\n    id?: number;\n    action?: () => void;\n    actionIcon?: string;\n\n    constructor(init?: Partial<TextTableCell>) {\n        Object.assign(this, init);\n    }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<TextTableCell>",
                        "optional": true
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<TextTableCell>",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "action",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "actionIcon",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ITableCell"
            ]
        },
        {
            "name": "Versicherung",
            "id": "class-Versicherung-fc27194d578261fbc6c64c912581c820",
            "file": "src/app/services/models/versicherung.ts",
            "type": "class",
            "sourceCode": "import { IName } from \"./interfaces/IName\" \nimport { IDatum } from './interfaces/IDatum';\nexport class Versicherung implements IName, IDatum {\n    id: number;\n    Name: string;\n    Rueckkaufswert: number;\n    AusgabenId?: number;\n    Datum: string;\n    Erstellt: string;\n\n    constructor(init?: Partial<Versicherung>) {\n        Object.assign(this, init);\n    }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Versicherung>",
                        "optional": true
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Versicherung>",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "AusgabenId",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "Datum",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "Erstellt",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "Name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "Rueckkaufswert",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IName",
                "IDatum"
            ]
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-45c2b91e4357c89120d246b7a9f9b6bd",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "items",
                    "defaultValue": "new Array<INavigationItem>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectedTab",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "selectItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "INavigationItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "INavigationItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { NavigationService } from './services/navigation.service';\nimport { INavigationItem } from './ui/models/navigation-bar/INavigationItem';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n  public selectedTab: number;\n  public items = new Array<INavigationItem>();\n\n  constructor(\n    private router: Router, \n    private navigationService: NavigationService\n    ) {\n    this.items = navigationService.getNavigationItems();\n    this.navigationService.activeMenu.subscribe(id => {\n      this.selectedTab = id;\n    })\n  }\n\n  public selectItem(item: INavigationItem) {\n    if (item.isLinkItem && item.toLinkItem().link != null) {\n      this.router.navigate([item.toLinkItem().link]);\n    }\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-navigation-bar \n    [items]=\"items\" \n    [selected]=\"selectedTab\" \n    (onClick)=\"selectItem($event)\" \n    size=\"medium\"\n    darkmode=true>\n</app-navigation-bar>\n<router-outlet></router-outlet>"
        },
        {
            "name": "BadgeComponent",
            "id": "component-BadgeComponent-604ec5ab27321ef594b28e7fbd68850f",
            "file": "src/app/ui/badge/badge.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-badge",
            "styleUrls": [
                "./badge.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./badge.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "customClass",
                    "defaultValue": "''",
                    "line": 14,
                    "type": "\"green\" | \"red\" | \"\""
                },
                {
                    "name": "filled",
                    "defaultValue": "false",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "line": 11,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-badge',\n  templateUrl: './badge.component.html',\n  styleUrls: ['./badge.component.scss']\n})\nexport class BadgeComponent implements OnInit {\n\n  @Input()\n  label: string;\n\n  @Input()\n  customClass: 'green' | 'red' | '' = '';\n\n  @Input()\n  filled: boolean = false;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "* { \n    --badgeColor: #909090;\n    //--badgeBgColor: #f3f3f3;\n}\n\n\n.badge {\n    display: inline-flex;\n    font-size: small;\n    font-weight: 400;\n    color: var(--badgeColor);\n    border: 1px solid var(--badgeColor);\n    padding: .4em;\n    vertical-align: middle;\n    background-color: var(--badgeBgColor);\n    margin-right: .4em;\n\n    &.green {\n        color: green;\n        border: 1px solid green;\n    }\n\n    &.red {\n        color: red;\n        border: 1px solid red;\n    }\n\n    &.fill {\n        &.green {\n            background-color: green;\n            color: white;\n            border: 1px solid green;\n        }\n    \n        &.red {\n            background-color: red;\n            color: white;\n            border: 1px solid red;\n        }\n    }\n}",
                    "styleUrl": "./badge.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<span class=\"badge\" [ngClass]=\"[customClass, filled ? 'fill' : '']\">{{ label | uppercase }}</span>\n"
        },
        {
            "name": "ExpensesComponent",
            "id": "component-ExpensesComponent-6eb59313d1fa5a7192d4d1e9486ae92e",
            "file": "src/app/pages/expenses/expenses.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-expenses",
            "styleUrls": [
                "./expenses.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./expenses.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addEntryIcon",
                    "defaultValue": "getIconWithName('plus-circle-line')",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "api",
                    "type": "ApiService",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "categories",
                    "defaultValue": "['Telefon', 'Streaming', 'Versicherung', 'Wohnung', 'Freizeit', 'KFZ', 'Kinder', 'Sparen', 'Bahn']",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "changeEntry",
                    "defaultValue": "new Ausgabe()",
                    "type": "Ausgabe",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "currentPerson",
                    "defaultValue": "'Jörg'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "currentSortEntry",
                    "defaultValue": "new SortEntry({\n    column: new TableHeader({\n      isSortable: true,\n      label: 'Name'\n    }),\n    direction: 'asc'\n  })",
                    "type": "SortEntry",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "type": "Array<Ausgabe>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "deleteConfirmMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "deletionEntry",
                    "type": "Ausgabe",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "footerText",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "groupCell",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "header",
                    "defaultValue": "[]",
                    "type": "Array<TableHeader>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "lastResult",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pageTitle",
                    "defaultValue": "\"Expenses\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personButtonLabel",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personIcon",
                    "defaultValue": "getIconWithName('user-line')",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "persons",
                    "defaultValue": "['Julia', 'Jörg']",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "rows",
                    "defaultValue": "[]",
                    "type": "Array<TableRow>",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "tableSize",
                    "defaultValue": "TableSize.Medium",
                    "type": "TableSize",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "change",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 248,
                    "description": "<p>Value change of an item was triggered by click on a button</p>\n",
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "changeItem",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        },
                        {
                            "name": "item",
                            "type": "Partial<Ausgabe>"
                        },
                        {
                            "name": "reload",
                            "type": "boolean",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 269,
                    "description": "<p>Change new Item in Database</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8906,
                                "end": 8908,
                                "flags": 0,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "tagName": {
                                "pos": 8900,
                                "end": 8905,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>number Item id to change</p>\n"
                        },
                        {
                            "name": {
                                "pos": 8946,
                                "end": 8950,
                                "flags": 0,
                                "escapedText": "item"
                            },
                            "type": "Partial<Ausgabe>",
                            "tagName": {
                                "pos": 8940,
                                "end": 8945,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Partial<Ausgabe></p>\n"
                        },
                        {
                            "name": "reload",
                            "type": "boolean",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeOrCreateEntry",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 312,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "changeUser",
                    "args": [
                        {
                            "name": "person",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 322,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeModal",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 221,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createHeader",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "createItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "Ausgabe"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 291,
                    "description": "<p>Create new Item in Database</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9753,
                                "end": 9757,
                                "flags": 0,
                                "escapedText": "item"
                            },
                            "type": "Ausgabe",
                            "tagName": {
                                "pos": 9747,
                                "end": 9752,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Ausgabe</p>\n"
                        }
                    ]
                },
                {
                    "name": "deleteEntry",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Ausgabe"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 200,
                    "description": "<p>Deletes one entry from the Database</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7017,
                                "end": 7023,
                                "flags": 0,
                                "escapedText": "$event"
                            },
                            "type": "Ausgabe",
                            "tagName": {
                                "pos": 7011,
                                "end": 7016,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Ausgabe</p>\n"
                        }
                    ]
                },
                {
                    "name": "loadData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "mapDataToTableModel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "description": "<p>Creates Table model from Input Data Model</p>\n",
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "mapToNewEntry",
                    "args": [
                        {
                            "name": "entry",
                            "type": "Ausgabe"
                        }
                    ],
                    "optional": false,
                    "returnType": "Ausgabe",
                    "typeParameters": [],
                    "line": 230,
                    "description": "<p>Create new entry from given one with updated timestamps</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7836,
                                "end": 7841,
                                "flags": 0,
                                "escapedText": "entry"
                            },
                            "type": "Ausgabe",
                            "tagName": {
                                "pos": 7830,
                                "end": 7835,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Ausgabe</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 7856,
                                "end": 7863,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Ausgabe</p>\n"
                        }
                    ]
                },
                {
                    "name": "newExpenseEntry",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70
                },
                {
                    "name": "openModal",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 217,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showResultWithTimer",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 190,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortColumn",
                    "args": [
                        {
                            "name": "sortEntry",
                            "type": "SortEntry"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "sortEntry",
                            "type": "SortEntry",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { CurrencyPipe, DatePipe } from '@angular/common';\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { timer } from 'rxjs';\nimport { getIconWithName } from 'src/app/data/iconFactory';\nimport { ModalService } from 'src/app/modalModule';\nimport { ApiService } from 'src/app/services/api.service';\nimport { Ausgabe } from 'src/app/services/models/ausgabe';\nimport { NavigationService } from 'src/app/services/navigation.service';\nimport { TableRow, ITableCell, TableSize, TextTableCell, TableRowAction, TableHeader } from 'src/app/ui';\nimport { GroupRow } from 'src/app/ui/models/table/groupRow';\nimport { NumberTableCell } from 'src/app/ui/models/table/numberTableCell';\nimport { SortEntry } from 'src/app/ui/models/table/sortEntry';\nimport { StyledTextTableCell } from 'src/app/ui/models/table/styledTextTableCell';\nimport '../../util/dateExtensions';\n\n\n@Component({\n  selector: 'app-expenses',\n  templateUrl: './expenses.component.html',\n  styleUrls: ['./expenses.component.scss']\n})\nexport class ExpensesComponent implements OnInit {\n  public pageTitle = \"Expenses\";\n  private data: Array<Ausgabe> = [];\n  public categories: Array<string> = ['Telefon', 'Streaming', 'Versicherung', 'Wohnung', 'Freizeit', 'KFZ', 'Kinder', 'Sparen', 'Bahn'];\n\n  public persons: Array<string> = ['Julia', 'Jörg'];\n  public currentPerson: string = 'Jörg';\n  public personIcon: string = getIconWithName('user-line');\n  public personButtonLabel = (p: string) => `Switch to ${p}`;\n\n  public rows: Array<TableRow> = [];\n  public header: Array<TableHeader> = [];\n  public groupCell: number;\n  public tableSize: TableSize = TableSize.Medium;\n  public footerText: string;\n\n  public addEntryIcon: string = getIconWithName('plus-circle-line');\n\n  public deletionEntry: Ausgabe;\n  public deleteConfirmMessage: string;\n  \n  public lastResult: string = '';\n  public currentSortEntry: SortEntry = new SortEntry({\n    column: new TableHeader({\n      isSortable: true,\n      label: 'Name'\n    }),\n    direction: 'asc'\n  });\n\n  public changeEntry: Ausgabe = new Ausgabe();\n\n  constructor(\n    private currencyPipe: CurrencyPipe,\n    private datePipe: DatePipe,\n    private modalService: ModalService,\n    private navigationService: NavigationService,\n    public api: ApiService\n\n  ) {\n    this.navigationService.activeMenu.next(4);\n\n    this.api.setService(\"ausgaben\");\n    this.loadData();\n\n  }\n\n  ngOnInit(): void {\n  }\n\n  private loadData() {\n    this.api.getEntries<Ausgabe>().subscribe({\n      next: (result) => {\n        if (this.currentSortEntry != null) {\n          if (this.currentSortEntry.direction == 'asc') {\n            this.data = result.SortAscending(this.currentSortEntry.column.label);\n          } else if (this.currentSortEntry.direction == 'desc') {\n            this.data = result.SortDescending(this.currentSortEntry.column.label);\n          }\n        } else {\n          this.data = result.SortAscending('Name');\n        }\n        // Person filter\n        this.data = this.data.filter(d => d.Person == this.currentPerson);\n        //  Mapping\n        this.mapDataToTableModel();\n      },\n      error: (err) => {\n        console.log(\"Error loading expenses!\", err);\n      }\n    })\n  }\n  public newExpenseEntry() {\n    this.changeEntry = new Ausgabe();\n    this.changeEntry.Start = this.datePipe.transform(new Date(), 'yyyy-MM-dd');\n    this.changeEntry.Person = this.currentPerson;\n    this.openModal('change-entry');\n  }\n\n  /**\n   * Creates Table model from Input Data Model\n   */\n  private mapDataToTableModel() {\n    this.createHeader();\n\n    let result = new Array<TableRow>();\n    this.data.forEach(entry => {\n      let row = new TableRow();\n      \n      // Actions\n      let action = new TableRowAction();\n      action.tooltip = \"Change\";\n      action.icon = getIconWithName(\"pencil-line\");\n      action.action = (id: number) => {\n        this.changeEntry = entry;\n        this.changeEntry.Start = this.datePipe.transform(this.changeEntry.Start, 'yyyy-MM-dd');\n        this.openModal('change-entry');\n      };\n      row.actions.push(action); \n\n      // Actions\n      action = new TableRowAction();\n      action.tooltip = \"Delete\";\n      action.icon = getIconWithName(\"trash-line\");\n      action.action = (id: number) => {\n        this.deletionEntry = entry;\n        this.deleteConfirmMessage = `Confirm Entry deletion: Id=${entry.id}: ${entry.Name}, Created=${ this.datePipe.transform(entry.Erstellt) }?`;\n        this.openModal('delete-confirmation');\n      };\n      row.actions.push(action); \n\n      // Cells\n      row.cells.push(new TextTableCell({ id: entry.id, label: entry.id ? `${entry.id}` : \"n/a\"}));\n      row.cells.push(new StyledTextTableCell({ id: entry.id, label: entry.Name, style: {'font-weight':'500'} }));\n      row.cells.push(new TextTableCell({ id: entry.id, label: entry.Kategorie }));\n      row.cells.push(new TextTableCell({ id: entry.id, label: entry.Intervall }));\n\n      // Cells\n      let cell = new NumberTableCell({ id: entry.id, label: this.currencyPipe.transform(entry.Betrag), numericValue: entry.Betrag });\n      cell.action = () => {\n        this.changeEntry = entry;\n        this.changeEntry.Start = this.datePipe.transform(new Date(), 'yyyy-MM-dd');\n        this.openModal('change-value');\n      };\n      cell.actionIcon = getIconWithName(\"slider-line\");\n      row.cells.push(cell);\n\n      // Monthly Column calculated\n      let monthly = entry.Betrag;\n      if (entry.Intervall == 'Jahr') {\n        monthly = monthly / 12;\n      } else if (entry.Intervall == 'Quartal') {\n        monthly = monthly / 3;\n      }\n      row.cells.push(new NumberTableCell({ id: entry.id, label: this.currencyPipe.transform(monthly), numericValue: monthly }));\n\n      row.cells.push(new TextTableCell({ id: entry.id, label: entry.Beschreibung }));\n      row.cells.push(new TextTableCell({ id: entry.id, label: this.datePipe.transform(entry.Start) }));\n\n      result.push(row);\n    });\n\n    this.rows = result;\n    this.footerText = `${this.rows.length} Entries`;\n  }\n\n  public sortColumn(sortEntry: SortEntry) {\n    this.currentSortEntry = sortEntry;\n    this.loadData();\n  }\n\n  private createHeader() {\n    let header: Array<TableHeader> = [];\n\n    header.push({ label: 'No.' });\n    header.push({ label: 'Name', isSortable: true });\n    header.push({ label: 'Kategorie', isGroupable: true });\n    header.push({ label: 'Intervall', isGroupable: true, isSortable: true });\n    header.push({ label: 'Betrag', isSortable: true, summarizeWhenGrouped: false });\n    header.push({ label: 'Monatsbetrag', summarizeWhenGrouped: true });\n    header.push({ label: 'Beschreibung' });\n    header.push({ label: 'Start', isSortable: true });\n\n    this.header = header;\n    this.groupCell = 2;\n  }\n  \n  private showResultWithTimer(message: string) {\n    this.lastResult = message;\n    const resultTimer = timer(10000);\n    resultTimer.subscribe(v => this.lastResult = '');\n  }\n\n  /**\n   * Deletes one entry from the Database\n   * @param $event Ausgabe\n   */\n  public deleteEntry($event: Ausgabe) {\n    if ($event) {\n      // Call the API to delete the entry\n      this.api.setService(\"ausgaben\");\n      this.api.deleteEntryById<Ausgabe>($event.id).subscribe({\n        next: (res) => {\n          this.showResultWithTimer(`Item ${$event.id}: ${$event.Name}/${$event.Erstellt} Deletion: HTTP Code ${res.status} ${res.statusText}`);\n          this.loadData();\n        },\n        error: (err) => {\n          this.showResultWithTimer(`Item ${$event.id} Deletion Failed: ${err}`);\n        }\n      });\n    }\n    this.closeModal('delete-confirmation');\n  }\n\n  openModal(id: string) {\n    this.modalService.open(id);\n  }\n\n  closeModal(id: string) {\n    this.modalService.close(id);\n  }\n\n  /**\n   * Create new entry from given one with updated timestamps\n   * @param entry Ausgabe\n   * @returns Ausgabe\n   */\n  private mapToNewEntry(entry: Ausgabe): Ausgabe {\n    let result = new Ausgabe({\n      Bearbeitet: new Date().toPreferredStringFormat(),\n      Erstellt: new Date().toPreferredStringFormat(),\n      Beschreibung: entry.Beschreibung,\n      Betrag: entry.Betrag,\n      Start: entry.Start,\n      Intervall: entry.Intervall,\n      Kategorie: entry.Kategorie,\n      Name: entry.Name,\n      Tag: entry.Tag\n    });\n    return result;\n  }\n\n  /**\n   * Value change of an item was triggered by click on a button\n   */\n  public change() {\n    // Create newly mapped item\n    let newItem = this.mapToNewEntry(this.changeEntry);\n    if (!newItem.Start || newItem.Start == '') \n      newItem.Start = this.datePipe.transform(new Date(), 'yyyy-MM-dd');\n    \n    // Create change partial item\n    let changedData: Partial<Ausgabe> = {\n      Ende: newItem.Start\n    }\n\n    this.changeItem(this.changeEntry.id, changedData);\n    this.createItem(newItem);\n    this.closeModal('change-value');\n  }\n\n  /**\n   * Change new Item in Database\n   * @param id number Item id to change\n   * @param item Partial<Ausgabe>\n   */\n  private changeItem(id: number, item: Partial<Ausgabe>, reload: boolean = false) {\n    item.Bearbeitet = new Date().toPreferredStringFormat();\n    this.api.setService(\"ausgaben\");\n    this.api.changeEntry<Partial<Ausgabe>>(id, item).subscribe(\n        res => {\n          var response = <HttpResponse<Partial<Ausgabe>>>res;\n          this.showResultWithTimer(`PUT Ausgabe item: ${item.Name}/${item.Betrag}: HTTP Code ${response.status}`);\n          if (reload) {\n            this.loadData();\n          }\n        },\n        (err: HttpErrorResponse) => {\n          this.showResultWithTimer(`Error changing the expense entry!: ${err}`);\n          console.error(`Error changing the expense entry!: ${err}`);\n        }\n      );\n  }\n\n  /**\n   * Create new Item in Database\n   * @param item Ausgabe\n   */\n  private createItem(item: Ausgabe) {\n    item.Erstellt = new Date().toPreferredStringFormat();\n    item.Bearbeitet = new Date().toPreferredStringFormat();\n    item.Person = this.currentPerson;\n\n    this.api.setService(\"ausgaben\");\n    this.api.createEntry<Ausgabe>(item).subscribe(\n        res => {\n          var response = <HttpResponse<Ausgabe>>res;\n          this.showResultWithTimer(`POST Ausgabe item: ${item.Name}/${item.Betrag}: HTTP Code ${response.status}`);\n\n          if (res.ok) {\n            this.loadData();\n          }\n        },\n        (err: HttpErrorResponse) => {\n          this.showResultWithTimer(`Error creating the expense entry!: ${err}`);\n        }\n      );\n  }\n\n  public changeOrCreateEntry() {\n    if (this.changeEntry.id) {\n      this.changeItem(this.changeEntry.id, this.changeEntry,true);\n    } else {\n      // New Entry\n      this.createItem(this.changeEntry);\n    }\n    this.closeModal('change-entry');\n  }\n\n  public changeUser(person: string) {\n    this.currentPerson = person;\n    this.loadData();\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./expenses.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "currencyPipe",
                        "type": "CurrencyPipe"
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe"
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService"
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService"
                    },
                    {
                        "name": "api",
                        "type": "ApiService"
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "currencyPipe",
                        "type": "CurrencyPipe",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"page\">\n    <app-page-header>\n        <div class=\"left\">\n            {{ pageTitle }}\n            \n        </div>\n        <div class=\"right\">\n            <span class=\"status-text\">{{ lastResult }}</span>\n\n            <ng-container *ngFor=\"let p of persons\">\n                <app-menu-button *ngIf=\"currentPerson != p\" [label]=\"personButtonLabel(p)\" [icon]=\"personIcon\" iconSize=18 (clickEvent)=\"changeUser(p)\"></app-menu-button>\n            </ng-container>\n            <app-menu-button label=\"New Expense\" [icon]=\"addEntryIcon\" iconSize=18 (clickEvent)=\"newExpenseEntry()\"></app-menu-button>\n        </div>\n    </app-page-header>\n    <p></p>\n    <app-table \n        [header]=\"header\" \n        [rows]=\"rows\" \n        [size]=\"tableSize\"\n        [footer]=\"footerText\"\n        collapseGroupsByDefault=true \n        [groupColumnIndex]=\"groupCell\" \n        [sortEntry]=\"currentSortEntry\"\n        (sortAction)=\"sortColumn($event)\">\n    </app-table>\n</div>\n\n<jw-modal id=\"delete-confirmation\" class=\"small-modal\">\n    <h3>Really Delete Entry</h3>\n    <p>{{deleteConfirmMessage}}</p>\n    <button type=\"button\" class=\"btn btn-danger\" (click)=\"deleteEntry(deletionEntry)\">Delete</button>\n    &nbsp;\n    <button type=\"button\" class=\"btn btn-primary\" style=\"float: right;\" (click)=\"closeModal('delete-confirmation');\">Cancel</button>\n</jw-modal>\n\n<jw-modal id=\"change-value\" class=\"small-modal\">\n    <h4>Change expense value</h4>\n    <p>{{ changeEntry.Name }} pro {{ changeEntry.Intervall }} (id: {{ changeEntry.id }})</p>\n\n    <table style=\"width: 100%;\">\n        <tr>\n            <td style=\"width: 30%;\">\n                <strong>New Value:</strong>\n            </td>\n            <td>\n                <input type=\"number\" id=\"value\" name=\"Betrag\" required [(ngModel)]=\"changeEntry.Betrag\"/>\n            </td>\n        </tr>\n        <tr>&nbsp;</tr>\n        <tr>\n            <td style=\"width: 30%;\">\n                <strong>Start Date:</strong>\n            </td>\n            <td>\n                <input type=\"date\" id=\"datum\" required [(ngModel)]=\"changeEntry.Start\" name=\"Datum\">\n            </td>\n        </tr>\n    </table>\n\n    <p></p>\n\n    <button type=\"button\" class=\"btn btn-danger\" (click)=\"change()\">Change</button>\n    &nbsp;\n    <button type=\"button\" class=\"btn btn-primary\" style=\"float: right;\" (click)=\"closeModal('change-value');\">Cancel</button>\n</jw-modal>\n\n<jw-modal id=\"change-entry\" class=\"small-modal\">\n    <h4>{{ changeEntry.id ? 'Change' :'Create'}} expense record</h4>\n    <p *ngIf=\"changeEntry.id\">{{ changeEntry.Name }} pro {{ changeEntry.Intervall }} (id: {{ changeEntry.id }})</p>\n\n    <form (ngSubmit)=\"changeOrCreateEntry()\" #ausgabeForm=\"ngForm\">\n        <div class=\"form-row\">\n          <div class=\"form-group col-md-6\">\n            <label for=\"name\"><strong>Name</strong></label>\n            <input type=\"text\" class=\"form-control\" id=\"name\" required [(ngModel)]=\"changeEntry.Name\" name=\"Name\"\n                #name=\"ngModel\">\n            <div [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\">\n                Name is required</div>\n          </div>\n    \n          <div class=\"form-group col-md-6\">\n            <label for=\"kategorie\"><strong>Kategorie</strong></label>\n            <select class=\"form-control\" id=\"kategorie\" required [(ngModel)]=\"changeEntry.Kategorie\" name=\"Kategorie\" #kategorie=\"ngModel\">\n                <option *ngFor=\"let c of categories\"> {{ c }}</option>\n            </select>\n            <div [hidden]=\"kategorie.valid || kategorie.pristine\" class=\"alert alert-danger\">\n                Kategorie is required</div>\n          </div>\n\n          <div class=\"form-group col-md-6\">\n            <label for=\"person\"><strong>Person</strong></label>\n            <select class=\"form-control\" id=\"person\" required [(ngModel)]=\"changeEntry.Person\" name=\"Person\" #person=\"ngModel\">\n                <option *ngFor=\"let c of persons\"> {{ c }}</option>\n            </select>\n            <div [hidden]=\"person.valid || person.pristine\" class=\"alert alert-danger\">\n                Person is required</div>\n          </div>\n\n          <div class=\"form-group col-md-6\">\n            <label for=\"intervall\"><strong>Intervall</strong></label>\n            <select class=\"form-control\" id=\"intervall\" required [(ngModel)]=\"changeEntry.Intervall\" name=\"Intervall\" #intervall=\"ngModel\">\n                <option>Monat</option>\n                <option>Quartal</option>\n                <option>Jahr</option>\n              </select>\n              <div [hidden]=\"intervall.valid || intervall.pristine\" class=\"alert alert-danger\">\n                Intervall is required</div>\n          </div>\n\n          <div class=\"form-group col-md-6\">\n            <label for=\"betrag\"><strong>Betrag</strong></label>\n            <input type=\"number\" class=\"form-control\" id=\"betrag\" required [(ngModel)]=\"changeEntry.Betrag\" name=\"Betrag\"\n                #betrag=\"ngModel\">\n            <div [hidden]=\"betrag.valid || betrag.pristine\" class=\"alert alert-danger\">\n                Betrag is required number</div>\n        </div>\n\n        <div class=\"form-group col-md-6\">\n            <label for=\"beschreibung\"><strong>Beschreibung</strong></label>\n            <input type=\"text\" class=\"form-control\" id=\"beschreibung\" [(ngModel)]=\"changeEntry.Beschreibung\" name=\"Beschreibung\" \n                #beschreibung=\"ngModel\">\n        </div>\n\n        <div class=\"form-group col-md-6\">\n            <label for=\"start\"><strong>Start</strong></label>\n            <input type=\"date\" class=\"form-control\" id=\"start\" [(ngModel)]=\"changeEntry.Start\" name=\"Start\" \n                #start=\"ngModel\">\n        </div>\n\n        <div class=\"form-group col-md-6\">\n            <label for=\"ende\"><strong>Ende</strong></label>\n            <input type=\"date\" class=\"form-control\" id=\"ende\" [(ngModel)]=\"changeEntry.Ende\" name=\"Ende\" \n                #ende=\"ngModel\">\n        </div>\n    \n        </div>\n        <button type=\"button\" class=\"btn btn-secondary\" style=\"float: right;\" (click)=\"closeModal('change-entry');\">Cancel</button>\n        <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!ausgabeForm.form.valid\">{{ changeEntry.id ? 'Change' :'Create'}}</button>&nbsp;\n    </form>\n</jw-modal>"
        },
        {
            "name": "InlineButtonGroupComponent",
            "id": "component-InlineButtonGroupComponent-b7d7ee1a561ec425b40f9d116406d1ac",
            "file": "src/app/ui/inline-button-group/inline-button-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-inline-button-group",
            "styleUrls": [
                "./inline-button-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./inline-button-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttons",
                    "line": 12,
                    "type": "Array<Button>"
                },
                {
                    "name": "multiSelect",
                    "defaultValue": "false",
                    "line": 15,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedButtons",
                    "defaultValue": "new EventEmitter<Array<Button>>()",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "buttonClicked",
                    "args": [
                        {
                            "name": "button",
                            "type": "Button"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "button",
                            "type": "Button",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { Button } from '../models/inline-button-group/button';\n\n@Component({\n  selector: 'app-inline-button-group',\n  templateUrl: './inline-button-group.component.html',\n  styleUrls: ['./inline-button-group.component.scss']\n})\nexport class InlineButtonGroupComponent implements OnInit {\n\n  @Input()\n  buttons: Array<Button>;\n\n  @Input()\n  multiSelect: boolean = false;\n\n  @Output()\n  selectedButtons = new EventEmitter<Array<Button>>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  public buttonClicked(button: Button) {\n    if (!this.multiSelect) {\n      this.buttons.filter(b => b != button).forEach(b => b.isSelected = false);\n    }\n    button.isSelected = !button.isSelected;\n    this.selectedButtons.emit(this.buttons.filter(b => b.isSelected));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".btn {\n    margin-right: .4em;\n    font-size: small;\n    margin-bottom: .4em;\n    \n}\n.btn-light {\n    background-color: transparent;\n    border: 1px solid #aeaeae;\n    color: #aeaeae;\n}",
                    "styleUrl": "./inline-button-group.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngFor=\"let button of buttons\">\n    <button type=\"button\" class=\"btn btn-sm\" (click)=\"buttonClicked(button)\" [ngClass]=\"button.isSelected ? 'btn-primary': 'btn-light'\">{{ button.label }}</button>\n</ng-container>\n"
        },
        {
            "name": "InsuranceAddEntryComponent",
            "id": "component-InsuranceAddEntryComponent-800e615994dd614df3edd1fe4b584018",
            "file": "src/app/components/insurance-add-entry/insurance-add-entry.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-insurance-add-entry",
            "styleUrls": [
                "./insurance-add-entry.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./insurance-add-entry.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "model",
                    "line": 12,
                    "type": "Versicherung"
                }
            ],
            "outputsClass": [
                {
                    "name": "newEntry",
                    "defaultValue": "new EventEmitter<Versicherung>()",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { Versicherung } from 'src/app/services/models/versicherung';\n\n@Component({\n  selector: 'app-insurance-add-entry',\n  templateUrl: './insurance-add-entry.component.html',\n  styleUrls: ['./insurance-add-entry.component.scss']\n})\nexport class InsuranceAddEntryComponent implements OnInit {\n\n  @Input()\n  model: Versicherung;\n\n  @Output()\n  newEntry = new EventEmitter<Versicherung>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  submit() {\n    this.newEntry.emit(this.model);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./insurance-add-entry.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form (ngSubmit)=\"submit()\" #insuranceForm=\"ngForm\">\n    <div class=\"form-row\">\n\n      <div class=\"form-group col-md-3\">\n        <label for=\"datum\"><strong>Datum</strong></label>\n        <input type=\"date\" class=\"form-control\" id=\"datum\" required [(ngModel)]=\"model.Datum\" name=\"Datum\"\n            #datum=\"ngModel\">\n        <div [hidden]=\"datum.valid || datum.pristine\" class=\"alert alert-danger\">\n            Datum is required date</div>\n      </div>\n\n      <div class=\"form-group col-md-3\">\n          <label for=\"name\">Name</label>\n          <input type=\"string\" class=\"form-control\" id=\"name\" [(ngModel)]=\"model.Name\" name=\"Name\"\n              #name=\"ngModel\">\n      </div>\n\n      <div class=\"form-group col-md-3\">\n        <label for=\"rueckkaufswert\"><strong>Rueckkaufswert</strong></label>\n        <input type=\"number\" class=\"form-control\" id=\"rueckkaufswert\" required [(ngModel)]=\"model.Rueckkaufswert\" name=\"Rueckkaufswert\"\n            #rueckkaufswert=\"ngModel\">\n        <div [hidden]=\"rueckkaufswert.valid || rueckkaufswert.pristine\" class=\"alert alert-danger\">\n          Rueckkaufswert is required number</div>\n    </div>\n\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!insuranceForm.form.valid\">Create</button>&nbsp;\n</form>\n<br/>"
        },
        {
            "name": "InsuranceComponent",
            "id": "component-InsuranceComponent-a815e83d7a618207ee76150b51533589",
            "file": "src/app/pages/insurance/insurance.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-insurance",
            "styleUrls": [
                "./insurance.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./insurance.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addEntryIcon",
                    "defaultValue": "getIconWithName('plus-circle-line')",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "addEntryLabel",
                    "defaultValue": "\"Add Insurance\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "createEntryLastResult",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "data",
                    "type": "Array<Versicherung>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "deleteConfirmMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "deletionEntry",
                    "type": "Versicherung",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "footerText",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "groupCellIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "header",
                    "defaultValue": "[]",
                    "type": "Array<TableHeader>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "newInsuranceEntry",
                    "defaultValue": "new Versicherung({\n    Erstellt: this.datePipe.transform(new Date(), 'yyyy-MM-dd')\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pageTitle",
                    "defaultValue": "\"Insurance\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "rows",
                    "defaultValue": "[]",
                    "type": "Array<TableRow>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "showAddEntry",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "tableSize",
                    "defaultValue": "TableSize.Medium",
                    "type": "TableSize",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 218,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createFooter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "createHeader",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "createInsurance",
                    "args": [
                        {
                            "name": "item",
                            "type": "Versicherung"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Versicherung",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteEntry",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Versicherung"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "Versicherung",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getPreviousEntry",
                    "args": [
                        {
                            "name": "entry",
                            "type": "Versicherung"
                        }
                    ],
                    "optional": false,
                    "returnType": "Versicherung",
                    "typeParameters": [],
                    "line": 127,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "entry",
                            "type": "Versicherung",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapDataToTableModel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55
                },
                {
                    "name": "openModal",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 214,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetNewInsuranceItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "rowClicked",
                    "args": [
                        {
                            "name": "row",
                            "type": "TableRow"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "TableRow",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showResultWithTimer",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleNewEntryForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { CurrencyPipe, DatePipe } from '@angular/common';\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { timer } from 'rxjs';\nimport { getIconWithName } from 'src/app/data/iconFactory';\nimport { ModalService } from 'src/app/modalModule';\n/* import * as dayjs from 'dayjs';\nimport * as relativeTime from 'dayjs/plugin/relativeTime'; */\n\nimport { ApiService } from 'src/app/services/api.service';\nimport { Versicherung } from 'src/app/services/models/versicherung';\nimport { NavigationService } from 'src/app/services/navigation.service';\nimport { ITableCell, TableHeader, TableRow, TableRowAction, TableSize, TextTableCell } from 'src/app/ui';\nimport { StyledTextTableCell } from 'src/app/ui/models/table/styledTextTableCell';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-insurance',\n  templateUrl: './insurance.component.html',\n  styleUrls: ['./insurance.component.scss']\n})\nexport class InsuranceComponent implements OnInit {\n\n  public pageTitle: string = \"Insurance\";\n\n  public rows: Array<TableRow> = [];\n  public header: Array<TableHeader> = [];\n  public groupCellIndex: number;\n  public tableSize: TableSize = TableSize.Medium;\n  public footerText: string;\n\n  public data: Array<Versicherung>;\n  public deletionEntry: Versicherung;\n  public deleteConfirmMessage: string;\n\n  public showAddEntry: boolean = false;\n  public addEntryLabel: string = \"Add Insurance\";\n  public addEntryIcon: string = getIconWithName('plus-circle-line');\n  public newInsuranceEntry = new Versicherung({\n    Erstellt: this.datePipe.transform(new Date(), 'yyyy-MM-dd')\n  });\n  public createEntryLastResult: string = '';\n \n  constructor(\n    private navigationService: NavigationService,\n    private modalService: ModalService,\n    private currencyPipe: CurrencyPipe,\n    private datePipe: DatePipe,\n    private api: ApiService\n  ) { \n    this.navigationService.activeMenu.next(3);\n    // no loonger used: dayjs.extend(relativeTime);\n  }\n\n  ngOnInit(): void {\n    this.getData();\n  }\n\n  public rowClicked(row: TableRow) {\n    console.log(row);\n  }\n\n\n  private getData() {\n    this.api.setService(\"versicherungen\");\n    this.api.getAllEntries<Versicherung>().subscribe({\n      next: (result) => {\n        this.data = result.body.SortDescending('Datum');\n        if (environment.mockData) {\n          this.data.map(d => d.Rueckkaufswert = d.Rueckkaufswert * 45 * Math.random());\n        }\n        this.mapDataToTableModel();\n      },\n      error: (e) => {\n        console.error(\"Error getting Versicherungen!\", e);\n      }\n    })\n  }\n\n  private mapDataToTableModel() {\n    this.createHeader();\n    this.createFooter();\n\n    let result = new Array<TableRow>();\n    this.data.forEach(entry => {\n      let row = new TableRow();\n\n      // Actions\n      let action = new TableRowAction();\n      action.tooltip = \"Delete\";\n      action.icon = getIconWithName(\"trash-line\");\n      action.action = (id: number) => {\n        this.deletionEntry = entry;\n        this.deleteConfirmMessage = `Confirm Entry deletion: Id=${entry.id}: ${entry.Name}/${entry.Datum}?`;\n        this.openModal('delete-confirmation');\n      };\n      row.actions.push(action); \n      \n      \n      let prev = this.getPreviousEntry(entry);\n      let diff = prev == null ? 0 : entry.Rueckkaufswert - prev.Rueckkaufswert;\n      // Cells\n      let cell = new TextTableCell({ id: entry.id, label: entry.id ? `${entry.id}` : \"n/a\"});\n      row.cells.push(cell);\n      \n      cell = new StyledTextTableCell({ id: entry.id, label:`${entry.Name}`, style:{ 'font-weight': '500' } });\n      row.cells.push(cell);\n\n      cell = new TextTableCell({ id: entry.id, label:`${ this.currencyPipe.transform(entry.Rueckkaufswert) }`});\n      row.cells.push(cell);\n\n      cell = new StyledTextTableCell({ id: entry.id, label:`${ diff != 0 ? this.currencyPipe.transform(diff) : '' }`, style: diff > 0 ? { 'color': 'green' } : { 'color': 'red'} });\n      row.cells.push(cell);\n\n      cell = new StyledTextTableCell({ id: entry.id, label:`${ this.datePipe.transform(entry.Datum, 'dd.MM.yyyy') }`, style:{ 'color': '#909090' } });\n      row.cells.push(cell);\n\n      cell = new StyledTextTableCell({ id: entry.id, label:`${ this.datePipe.transform(entry.Erstellt, 'dd.MM.yyyy') }`, style:{ 'color': '#909090' } });\n      row.cells.push(cell);\n\n      result.push(row);\n    })\n\n    this.rows = result;\n  }\n\n  private getPreviousEntry(entry: Versicherung): Versicherung {\n    let filteredData = this.data.filter(d => d.Name == entry.Name);\n    let index = filteredData.indexOf(entry);\n    if (index == filteredData.length - 1) {\n      return null;\n    } \n    return filteredData[index + 1];\n  }\n\n  private createFooter() {\n    this.footerText = `${this.data.map(d => d.Name).Distinct().length} Categories`;\n  }\n\n  private createHeader() {\n    let header: Array<TableHeader> = [];\n\n    header.push({ label: 'No.' });\n    header.push({ label: 'Name' });\n    header.push({ label: 'Rückkaufswert' });\n    header.push({ label: 'Delta' });\n    header.push({ label: 'Datum' });\n    header.push({ label: 'Erstellt' });\n    this.header = header;\n    this.groupCellIndex = 1;\n  }\n\n  public toggleNewEntryForm() {\n    this.showAddEntry = !this.showAddEntry;\n    if (this.showAddEntry) {\n      this.addEntryLabel = \"Close Form\";\n      this.addEntryIcon = getIconWithName('times-circle-line');\n    } else {\n      this.addEntryLabel = \"Add Insurance\";\n      this.addEntryIcon = getIconWithName('plus-circle-line');\n    }\n  }\n\n  public createInsurance(item: Versicherung) {\n\n    console.log(\"Create Item: Versicherung: \", item);\n    this.api.setService(\"versicherungen\");\n    this.api.createEntry<Versicherung>(item).subscribe(\n        res => {\n          var response = <HttpResponse<Versicherung>>res;\n          this.showResultWithTimer(`POST Versicherung item: ${item.Name}/${item.Datum}: HTTP Code ${response.status}`);\n\n          if (res.ok) {\n            this.resetNewInsuranceItem();\n            this.toggleNewEntryForm();\n            this.getData();\n          }\n        },\n        (err: HttpErrorResponse) => {\n          this.showResultWithTimer(`Error creating the insurance entry!: ${err}`);\n        }\n      );\n  }\n\n  private resetNewInsuranceItem() {\n    this.newInsuranceEntry.Name = null;\n    this.newInsuranceEntry.Rueckkaufswert = null;\n    this.newInsuranceEntry.Datum = null;\n  }\n\n  private showResultWithTimer(message: string) {\n    this.createEntryLastResult = message;\n    const salaryLastResultTimer = timer(10000);\n    salaryLastResultTimer.subscribe(v => this.createEntryLastResult = '');\n  }\n\n  public deleteEntry($event: Versicherung) {\n    if ($event) {\n      // Call the API to delete the entry\n      this.api.setService(\"versicherungen\");\n      this.api.deleteEntryById<Versicherung>($event.id).subscribe({\n        next: (res) => {\n          this.showResultWithTimer(`Item ${$event.id}: ${$event.Name}/${$event.Datum} Deletion: HTTP Code ${res.status} ${res.statusText}`);\n          this.getData();\n        },\n        error: (err) => {\n          this.showResultWithTimer(`Item ${$event.id} Deletion Failed: ${err}`);\n        }\n      });\n    }\n    this.closeModal('delete-confirmation');\n  }\n\n  openModal(id: string) {\n    this.modalService.open(id);\n  }\n\n  closeModal(id: string) {\n    this.modalService.close(id);\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./insurance.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "navigationService",
                        "type": "NavigationService"
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService"
                    },
                    {
                        "name": "currencyPipe",
                        "type": "CurrencyPipe"
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe"
                    },
                    {
                        "name": "api",
                        "type": "ApiService"
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "currencyPipe",
                        "type": "CurrencyPipe",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"page\">\n    <app-page-header>\n        <div class=\"left\">{{ pageTitle }}</div>\n        <div class=\"right\">\n            <span class=\"status-text\">{{ createEntryLastResult }}</span>\n            <app-menu-button [label]=\"addEntryLabel\" [icon]=\"addEntryIcon\" iconSize=18 (clickEvent)=\"toggleNewEntryForm()\"></app-menu-button>\n        </div>\n    </app-page-header>\n    <app-insurance-add-entry *ngIf=\"showAddEntry\" [model]=\"newInsuranceEntry\" (newEntry)=\"createInsurance($event)\"></app-insurance-add-entry>\n    <p></p>\n    <app-table \n        [header]=\"header\" \n        [rows]=\"rows\" \n        [size]=\"tableSize\"\n        [footer]=\"footerText\"\n        collapseGroupsByDefault=true \n        [groupColumnIndex]=\"groupCellIndex\" \n        (rowAction)=\"rowClicked($event)\">\n    </app-table>\n</div>\n\n<jw-modal id=\"delete-confirmation\" class=\"small-modal\">\n    <h3>Really Delete Entry</h3>\n    <p>{{deleteConfirmMessage}}</p>\n    <button type=\"button\" class=\"btn btn-danger\" (click)=\"deleteEntry(deletionEntry)\">\n        Delete\n    </button>\n    &nbsp;\n    <button type=\"button\" class=\"btn btn-primary\" style=\"float: right;\" (click)=\"closeModal('delete-confirmation');\">\n        Close\n    </button>\n</jw-modal>"
        },
        {
            "name": "MenuButtonComponent",
            "id": "component-MenuButtonComponent-d83bb617eabb6ae5aa89e5ef6733018e",
            "file": "src/app/ui/menu-button/menu-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-menu-button",
            "styleUrls": [
                "./menu-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "iconSize",
                    "line": 18,
                    "type": "number"
                },
                {
                    "name": "label",
                    "line": 12,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "clickEvent",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "action",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-menu-button',\n  templateUrl: './menu-button.component.html',\n  styleUrls: ['./menu-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MenuButtonComponent implements OnInit {\n\n  @Input()\n  label: string;\n\n  @Input()\n  icon: string;\n\n  @Input()\n  iconSize: number;\n\n  @Output()\n  clickEvent = new EventEmitter<string>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  public action() {\n    this.clickEvent.emit(this.label);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".menu-button {\n    vertical-align: sub;\n    margin-left: 1em;\n    margin-right: 1em;\n    color: #0a7392;\n    cursor: pointer;\n    font-weight: 400;\n    font-size: small;\n}\n.button-icon {\n    margin-right: .4em;\n    margin-bottom: 2px;\n}\n",
                    "styleUrl": "./menu-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 21
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<span class=\"menu-button\" (click)=\"action()\"><img *ngIf=\"icon\" [width]=iconSize [src]=\"icon\" class=\"button-icon\"/>{{ label }}</span>\n"
        },
        {
            "name": "ModalComponent",
            "id": "component-ModalComponent-e41358bf7b9fbab1cd766b04a02dbe04",
            "file": "src/app/modalModule/modal.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jw-modal",
            "styleUrls": [
                "modal.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "class",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "id",
                    "line": 12,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "element",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ViewEncapsulation, ElementRef, Input, OnInit, OnDestroy } from '@angular/core';\n\nimport { ModalService } from './modal.service';\n\n@Component({ \n    selector: 'jw-modal', \n    templateUrl: 'modal.component.html', \n    styleUrls: ['modal.component.less'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ModalComponent implements OnInit, OnDestroy {\n    @Input() id: string;\n\n    @Input() class: string;\n    \n    private element: any;\n\n    constructor(private modalService: ModalService, private el: ElementRef) {\n        this.element = el.nativeElement;\n    }\n\n    ngOnInit(): void {\n        // ensure id attribute exists\n        if (!this.id) {\n            console.error('modal must have an id');\n            return;\n        }\n\n        // move element to bottom of page (just before </body>) so it can be displayed above everything else\n        document.body.appendChild(this.element);\n\n        // close modal on background click\n        this.element.addEventListener('click', el => {\n            if (el.target.className === 'jw-modal') {\n                this.close();\n            }\n        });\n\n        // add self (this modal instance) to the modal service so it's accessible from controllers\n        this.modalService.add(this);\n    }\n\n    // remove self from modal service when component is destroyed\n    ngOnDestroy(): void {\n        this.modalService.remove(this.id);\n        this.element.remove();\n    }\n\n    // open modal\n    open(): void {\n        this.element.style.display = 'block';\n        document.body.classList.add('jw-modal-open');\n    }\n\n    // close modal\n    close(): void {\n        this.element.style.display = 'none';\n        document.body.classList.remove('jw-modal-open');\n    }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "﻿/* MODAL STYLES\n-------------------------------*/\njw-modal {\n    /* modals are hidden by default */\n    display: none;\n\n    .jw-modal {\n        /* modal container fixed across whole screen */\n        position: fixed;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        align-items: center;\n        justify-content: center;\n        display: flex;\n        \n\n        /* z-index must be higher than .jw-modal-background */\n        z-index: 1000;\n        \n        /* enables scrolling for tall modals */\n        overflow: auto;\n\n        .jw-modal-body {\n            border-radius: .5em;\n            padding: 20px;\n            background: #fff;\n\n            /* margin exposes part of the modal background */\n            //margin: 140px;\n            width: 50%;\n\n            -webkit-box-shadow: 0 0 1em 0 #202020;\n            -moz-box-shadow: 0 0 1em 0 #202020;\n            box-shadow: 0 0 1em 0  #202020;\n\n            &.small-modal {\n                width: 30%\n            }\n            &.big-modal {\n                width: 85%;\n            }\n        }\n    }\n\n    .jw-modal-background {\n        /* modal background fixed across whole screen */\n        position: fixed;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n\n        /* semi-transparent black  */\n        background-color: #000;\n        opacity: 0.75;\n        \n        /* z-index must be below .jw-modal and above everything else  */\n        z-index: 900;\n    }\n}\n\nbody.jw-modal-open {\n    /* body overflow is hidden to hide main scrollbar when modal window is open */\n    overflow: hidden;\n}\n",
                    "styleUrl": "modal.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "ModalService"
                    },
                    {
                        "name": "el",
                        "type": "ElementRef"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "﻿<div class=\"jw-modal\">\n    <div class=\"jw-modal-body\" [ngClass]=\"class ? class : ''\">\n        <ng-content></ng-content>\n    </div>\n</div>\n<div class=\"jw-modal-background\"></div>"
        },
        {
            "name": "NavigationBarComponent",
            "id": "component-NavigationBarComponent-f550c9b5d11104e9e9474d6981742cd1",
            "file": "src/app/ui/navigation-bar/navigation-bar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navigation-bar",
            "styleUrls": [
                "./navigation-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navigation-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "darkmode",
                    "defaultValue": "false",
                    "line": 22,
                    "type": "boolean"
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "line": 13,
                    "type": "Array<INavigationItem>"
                },
                {
                    "name": "selected",
                    "defaultValue": "null",
                    "line": 16,
                    "type": "number"
                },
                {
                    "name": "size",
                    "defaultValue": "'normal'",
                    "line": 19,
                    "type": "\"normal\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<INavigationItem>()",
                    "line": 25,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { INavigationItem } from '../models/navigation-bar/INavigationItem';\n\n@Component({\n  selector: 'app-navigation-bar',\n  templateUrl: './navigation-bar.component.html',\n  styleUrls: ['./navigation-bar.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NavigationBarComponent {\n\n  @Input()\n  items: Array<INavigationItem> = [];\n\n  @Input()\n  selected: number = null;\n\n  @Input()\n  size: 'normal' | 'medium' | 'large' = 'normal';\n\n  @Input()\n  darkmode: boolean = false;\n\n  @Output()\n  onClick = new EventEmitter<INavigationItem>();\n\n  constructor() { }\n\n  public select(id: number) {\n    let item = this.items[id];\n\n    if (item.isActionItem && item.toActionItem().onClick != null) {\n      item.toActionItem().onClick();\n    }\n\n    this.onClick.emit(item);\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "* { --darkmodeColor: #404040; }\n\n.nav-bar {\n    min-width: 100%;\n    position: fixed; \n    top: 0;\n    display: flex;\n\n    box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n    padding-top: 2px;\n\n    margin: 0px;\n    background-color: white;\n    -webkit-box-shadow: 0 0 0.7em 0 #a0a0a0;\n    -moz-box-shadow: 0 0 0.7em 0 #a0a0a0;\n    box-shadow: 0 0 0.7em 0  #a0a0a0;\n\n    &.dark {\n        background-color: var(--darkmodeColor) !important;\n    }\n}\n\n.nav-item-icon {\n    &.normal {\n        width: 1em;\n        height: 1em;\n        \n    }\n    &.medium {\n        width: 1.1em;\n        height: 1.1em;\n    }\n    &.large {\n        width: 1.5em;\n        height: 1.5em;\n    }\n\n    &.dark {\n        filter: invert(1);\n    }\n    align-self: center;\n}\n\n.nav-item-text {\n    align-self: center;\n    &.dark {\n        color: white;\n    }\n    &.icon {\n        margin-left: .4em;\n        align-self: center;\n    }\n    &.bold {\n        font-weight: 600;\n    }\n}\n\n.nav-item {\n    color: #454645;\n    padding-left: 1.3em; \n    padding-right: 1.3em;\n    font-weight: 300;\n    display: flex;\n\n    &.normal {\n        padding-top: 0.7em;\n        padding-bottom: 0.7em;\n        font-size: 0.95em;\n    }\n    &.medium {\n        padding-top: 1em;\n        padding-bottom: 1em;\n        font-size: 1.005em;\n    }\n    &.large {\n        padding-top: 1.3em;\n        padding-bottom: 1.3em;\n        font-size: 1.1em;\n    }\n\n    \n    border-bottom: 2px solid white;\n    &.dark {\n        border-bottom: 2px solid var(--darkmodeColor);\n\n    }\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    -o-user-select: none;\n    user-select: none;\n\n\n    &.active {\n        cursor: pointer;\n        &:hover {\n            //font-weight: 600;\n            border-bottom: 2px solid var(--darkmodeColor);\n            &.dark {\n                border-bottom: 2px solid white;\n            }\n        }\n    }\n\n    &.selected {\n        //font-weight: 600;\n        border-bottom: 2px solid var(--darkmodeColor);\n        &.dark {\n            border-bottom: 2px solid white;\n        }\n    }\n\n    &.right {\n        margin-left: auto;\n    }\n}",
                    "styleUrl": "./navigation-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 25
            },
            "templateData": "<div class=\"nav-bar\" [ngClass]=\"darkmode ? 'dark' : ''\">\n    <span *ngFor=\"let item of items; let id = index;\" (click)=\"select(id)\" class=\"nav-item\" [ngClass]=\"[darkmode ? 'dark' : '', size == 'normal' ? 'normal' : size == 'medium' ? 'medium' : 'large', item.isLinkItem || item.isActionItem ? 'active' : '', id == selected ? 'selected' : '', item.align == 'right' ? 'right' : '']\">\n        <img *ngIf=\"item.icon\" class=\"nav-item-icon\" [src]=\"item.icon\" [ngClass]=\"[darkmode ? 'dark' : '', size == 'normal' ? 'normal' : size == 'medium' ? 'medium' : 'large']\"/>\n        <span class=\"nav-item-text\" [ngClass]=\"[darkmode ? 'dark' : '', item.label && item.icon ? 'icon' : '', item.showBold ? 'bold' : '']\">{{ item.label ? item.label : '' }}</span>\n    </span>\n</div>"
        },
        {
            "name": "OverviewComponent",
            "id": "component-OverviewComponent-4c1b4df64121d2db0bb13912d1070c85",
            "file": "src/app/pages/overview/overview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-overview",
            "styleUrls": [
                "./overview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./overview.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_numberOfYears",
                    "defaultValue": "6",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "chartButtonIcon",
                    "defaultValue": "getIconWithName('bar-chart-line')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "data",
                    "defaultValue": "{}",
                    "type": "Dictionary<Array<Gehalt>>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "diffs",
                    "defaultValue": "{}",
                    "type": "Dictionary<number>",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pageTitle",
                    "defaultValue": "\"Overview\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "showAllYears",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "x",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "y",
                    "type": "Array<ChartDataSets>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "years",
                    "defaultValue": "[]",
                    "type": "Array<number>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "openAllYearsChart",
                    "args": [
                        {
                            "name": "property",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "property",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openModal",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openSalaryChart",
                    "args": [
                        {
                            "name": "data",
                            "type": "Array<Gehalt>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Array<Gehalt>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleShowAllYears",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Route } from '@angular/router';\nimport { ChartDataSets } from 'chart.js';\nimport { GehaltTransformer } from 'src/app/data/gehaltTransformer';\nimport { getIconWithName } from 'src/app/data/iconFactory';\nimport { ModalService } from 'src/app/modalModule';\nimport { ApiService } from 'src/app/services/api.service';\nimport { Gehalt } from 'src/app/services/models/gehalt';\nimport { NavigationService } from 'src/app/services/navigation.service';\nimport { Dictionary } from 'src/app/util/dictionary';\nimport { getNYears } from 'src/app/util/getNYears';\nimport { environment } from 'src/environments/environment';\nimport '../../util/arrayExtensions';\nimport '../../util/numberExtensions';\n\n@Component({\n  selector: 'app-overview',\n  templateUrl: './overview.component.html',\n  styleUrls: ['./overview.component.scss']\n})\nexport class OverviewComponent implements OnInit {\n\n  //----\n  public showAllYears: boolean = false;\n\n  // Config\n  private _numberOfYears: number = 6;\n  public pageTitle: string = \"Overview\";\n\n  // Cards\n  public data: Dictionary<Array<Gehalt>> = {};\n  public years: Array<number> = [];\n  public diffs: Dictionary<number> = {};\n  //------\n\n  // CHart\n  public x: Array<string>;\n  public y: Array<ChartDataSets>;\n  public chartButtonIcon = getIconWithName('bar-chart-line');\n  \n  constructor(\n    private navigationService: NavigationService,\n    private api: ApiService,\n    //private modalService: BsModalService\n    private modalService: ModalService\n  ) {\n    this.navigationService.activeMenu.next(1);\n    this.loadData();\n  }\n\n  ngOnInit(): void {\n   \n  }\n\n  private loadData() {\n    let years = getNYears(this.showAllYears ? 99 : this._numberOfYears);\n    // Get Data from API\n    this.api.setService(\"gehalt\");\n    this.api.getAllEntries<Gehalt>().subscribe(\n      result => {\n        let data = result.body;\n        if (environment.mockData) {\n          data.map(d => d.Netto = d.Netto * 63 * Math.random());\n          data.map(d => d.Brutto  = d.Brutto * 24 * Math.random());\n        }\n        this.years = data.map(d => d.Jahr).Distinct().filter(y => years.includes(y)).sort((n1, n2) => {\n          if (n1 > n2) { return -1; }\n          if (n1 < n2) { return 1; }\n          return 0;\n        });\n        //let diffedData = GehaltTransformer.calculateYearDiffs(data);\n        this.diffs = GehaltTransformer.calculateYearDiffs(data, 'Brutto');\n        this.data = GehaltTransformer.groupByJahr(data);\n      }\n    );\n  }\n\n  public toggleShowAllYears() {\n    if (this.showAllYears) {\n      this.showAllYears = false;\n      this.loadData();\n    } else {\n      this.showAllYears = true;\n      this.loadData();\n    }\n  }\n\n  public openAllYearsChart(property: string) {\n\n    this.x = new Array<string>();\n    for(var i = 1; i < 13; i++) {\n      this.x.push(i.PadWithZero());\n    }\n    this.y = new Array<ChartDataSets>();    \n    this.years.forEach(y => {\n      this.y.push({\n        data: this.data[y].map(d => d[property]),\n        label: y.toString()\n      });\n    });\n    this.openModal('year-chart');\n  }\n\n  public openSalaryChart(data: Array<Gehalt>) {\n    this.x = data.map(d => `${ d.Jahr }/${ d.Monat.PadWithZero() }`);\n    let yearDataBrutto = data.map(d => d.Brutto);\n    let yearDataNetto = data.map(d => d.Netto);\n    this.y = new Array<ChartDataSets>();\n    this.y.push({\n      data: yearDataBrutto,\n      label: 'Brutto'\n    },{\n      data: yearDataNetto,\n      label: 'Netto'\n    }\n    );\n    //this.yLabel = 'Brutto';\n    this.openModal('year-chart');\n  }\n  \n  openModal(id: string) {\n    this.modalService.open(id);\n  }\n\n  closeModal(id: string) {\n    this.modalService.close(id);\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./overview.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "navigationService",
                        "type": "NavigationService"
                    },
                    {
                        "name": "api",
                        "type": "ApiService"
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService"
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"page\">\n\n    <app-page-header>\n        <div class=\"left\">{{ pageTitle }}\n\n        </div>\n        <div class=\"right\">\n            \n            <!-- Source: https://getbootstrap.com/docs/5.0/components/button-group/ -->\n            <div class=\"btn-group btn-group-sm\" style=\"float: right; margin-bottom: .5em;\" role=\"group\" aria-label=\"Years\">\n                <button type=\"button\" class=\"btn\" [ngClass]=\"!showAllYears ? 'btn-secondary' : 'btn-outline-secondary'\" (click)=\"toggleShowAllYears()\">Last 6 Years</button>\n                <button type=\"button\" class=\"btn\" [ngClass]=\"showAllYears ? 'btn-secondary' : 'btn-outline-secondary'\" (click)=\"toggleShowAllYears()\">All Years</button>\n            </div>\n\n            <app-menu-button label=\"Show Chart\" [icon]=\"chartButtonIcon\" iconSize=18 (clickEvent)=\"openAllYearsChart('Brutto');\"></app-menu-button>\n        </div>\n\n    </app-page-header>\n\n\n    <div class=\"row row-cols-1 row-cols-md-3\">\n        <app-salary-year-tile *ngFor=\"let year of years\" [year]=\"year\" [data]=\"data[year]\" [percent]=\"diffs[year]\" (details)=\"openSalaryChart($event)\"></app-salary-year-tile>\n    </div>\n\n</div>\n\n<jw-modal id=\"year-chart\" class=\"big-modal\">\n    <h3>Chart</h3>\n    <app-salary-chart [x]=\"x\" [y]=\"y\"></app-salary-chart>\n    <br/>\n    <button type=\"button\" class=\"btn btn-primary\" style=\"float: right;\" (click)=\"closeModal('year-chart');\">\n        Close\n    </button>\n</jw-modal>"
        },
        {
            "name": "PageHeaderComponent",
            "id": "component-PageHeaderComponent-5d08ad867eb13dfe7e0bae27c9754a1c",
            "file": "src/app/ui/page-header/page-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-header",
            "styleUrls": [
                "./page-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./page-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-page-header',\n  templateUrl: './page-header.component.html',\n  styleUrls: ['./page-header.component.scss']\n})\nexport class PageHeaderComponent implements OnInit {\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".title {\n    display: flex;\n    align-items: center;\n    margin-bottom: 1em;\n    justify-content: center;\n\n    .left {\n        font-size: 1.5em;\n        font-weight: 300;\n        color: black;\n        float: left;\n    }\n    \n    .right {\n        float: right;\n        margin-left: auto;\n    }\n}\n",
                    "styleUrl": "./page-header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"title\">\n    <div class=\"left\">\n        <ng-content select=\".left\"></ng-content>\n    </div>\n    <div class=\"right\">\n        <ng-content select=\".right\"></ng-content>\n    </div>\n</div>"
        },
        {
            "name": "SalaryAddEntryComponent",
            "id": "component-SalaryAddEntryComponent-b2175b3a788f76fd92ccd772bebaf38e",
            "file": "src/app/components/salary-add-entry/salary-add-entry.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-salary-add-entry",
            "styleUrls": [
                "./salary-add-entry.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./salary-add-entry.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "model",
                    "line": 12,
                    "type": "Gehalt"
                }
            ],
            "outputsClass": [
                {
                    "name": "newEntry",
                    "defaultValue": "new EventEmitter<Gehalt>()",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { Gehalt } from 'src/app/services/models/gehalt';\n\n@Component({\n  selector: 'app-salary-add-entry',\n  templateUrl: './salary-add-entry.component.html',\n  styleUrls: ['./salary-add-entry.component.scss']\n})\nexport class SalaryAddEntryComponent implements OnInit {\n\n  @Input()\n  model: Gehalt;\n\n  @Output()\n  newEntry = new EventEmitter<Gehalt>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  submit() {\n    this.newEntry.emit(this.model);\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./salary-add-entry.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form (ngSubmit)=\"submit()\" #gehaltForm=\"ngForm\">\n    <div class=\"form-row\">\n\n      <div class=\"form-group col-md-3\">\n        <label for=\"jahr\"><strong>Jahr</strong></label>\n        <input type=\"number\" class=\"form-control\" id=\"jahr\" required [(ngModel)]=\"model.Jahr\" name=\"Jahr\"\n            #jahr=\"ngModel\">\n        <div [hidden]=\"jahr.valid || jahr.pristine\" class=\"alert alert-danger\">\n            Jahr is required number</div>\n      </div>\n\n      <div class=\"form-group col-md-3\">\n        <label for=\"monat\"><strong>Monat</strong></label>\n        <input type=\"number\" class=\"form-control\" id=\"monat\" required [(ngModel)]=\"model.Monat\" name=\"Monat\" \n            #monat=\"ngModel\">\n        <div [hidden]=\"monat.valid || monat.pristine\" class=\"alert alert-danger\">\n            Monat is required number</div>\n      </div>\n\n      <div class=\"form-group col-md-3\">\n          <label for=\"brutto\"><strong>Brutto</strong></label>\n          <input type=\"number\" class=\"form-control\" id=\"brutto\" required [(ngModel)]=\"model.Brutto\" name=\"Brutto\"\n              #brutto=\"ngModel\">\n          <div [hidden]=\"brutto.valid || brutto.pristine\" class=\"alert alert-danger\">\n              Brutto is required number</div>\n      </div>\n\n      <div class=\"form-group col-md-3\">\n          <label for=\"netto\"><strong>Netto</strong></label>\n          <input type=\"number\" class=\"form-control\" id=\"netto\" required [(ngModel)]=\"model.Netto\" name=\"Netto\"\n              #netto=\"ngModel\">\n          <div [hidden]=\"netto.valid || netto.pristine\" class=\"alert alert-danger\">\n              Netto is required number</div>\n      </div>\n\n      <div class=\"form-group col-md-3\">\n          <label for=\"akp\">AKP</label>\n          <input type=\"number\" class=\"form-control\" id=\"akp\" [(ngModel)]=\"model.AKP\" name=\"AKP\" #akp=\"ngModel\">\n      </div>\n\n      <div class=\"form-group col-md-3\">\n          <label for=\"kantine\">Kantine</label>\n          <input type=\"number\" class=\"form-control\" id=\"kantine\" [(ngModel)]=\"model.Kantine\" name=\"Kantine\"\n              #kantine=\"ngModel\">\n      </div>\n\n      <div class=\"form-group col-md-3\">\n          <label for=\"arbeitgeber\">Arbeitgeber</label>\n          <input type=\"string\" class=\"form-control\" id=\"kantine\" [(ngModel)]=\"model.Arbeitgeber\" name=\"Arbeitgeber\"\n              #arbeitgeber=\"ngModel\">\n      </div>\n\n      <div class=\"form-group col-md-3\">\n          <label for=\"wochenstunden\">Wochenstunden</label>\n          <input type=\"number\" class=\"form-control\" id=\"kantine\" [(ngModel)]=\"model.Wochenstunden\" name=\"Wochenstunden\"\n              #wochenstunden=\"ngModel\">\n      </div>\n\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!gehaltForm.form.valid\">Create</button>&nbsp;\n</form>\n<br/>"
        },
        {
            "name": "SalaryChartComponent",
            "id": "component-SalaryChartComponent-7733eb7b34527602dbff15f9423115cc",
            "file": "src/app/components/salary-chart/salary-chart.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-salary-chart",
            "styleUrls": [
                "./salary-chart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./salary-chart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "x",
                    "line": 15,
                    "type": "Array<string>"
                },
                {
                    "name": "y",
                    "line": 18,
                    "type": "Array<ChartDataSets>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "barChartData",
                    "defaultValue": "[\n    {data: [65, 59, 80, 81, 56, 55, 40], label: 'Series A'},\n    {data: [28, 48, 40, 19, 86, 27, 90], label: 'Series B'}\n  ]",
                    "type": "ChartDataSets[]",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "barChartLabels",
                    "defaultValue": "['2006', '2007', '2008', '2009', '2010', '2011', '2012']",
                    "type": "Label[]",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "barChartLegend",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "barChartOptions",
                    "defaultValue": "{\n    responsive: true,\n    scales: {\n      yAxes: [{\n        ticks: {\n          beginAtZero: true\n        }\n      }]\n    },\n    plugins: {\n      datalabels: {\n        anchor: 'end',\n        align: 'end'\n      }\n    }\n  }",
                    "type": "ChartOptions",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "barChartPlugins",
                    "defaultValue": "[pluginDataLabels]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "barChartType",
                    "defaultValue": "'bar'",
                    "type": "ChartType",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "chartColors",
                    "defaultValue": "[\n    { // first color\n      backgroundColor: 'rgba(120,120,120,1)',\n      borderColor: 'rgba(225,10,24,0.2)',\n      pointBackgroundColor: 'rgba(225,10,24,0.2)',\n      pointBorderColor: '#fff',\n      pointHoverBackgroundColor: '#fff',\n      pointHoverBorderColor: 'rgba(225,10,24,0.2)'\n    },\n    { // second color\n      backgroundColor: 'rgba(150,150,150,1)',\n      borderColor: 'rgba(225,10,24,0.2)',\n      pointBackgroundColor: 'rgba(225,10,24,0.2)',\n      pointBorderColor: '#fff',\n      pointHoverBackgroundColor: '#fff',\n      pointHoverBorderColor: 'rgba(225,10,24,0.2)'\n    }]",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\nimport { ChartOptions, ChartType, ChartDataSets } from 'chart.js';\nimport * as pluginDataLabels from 'chartjs-plugin-datalabels';\nimport { Label } from 'ng2-charts';\n\n@Component({\n  selector: 'app-salary-chart',\n  templateUrl: './salary-chart.component.html',\n  styleUrls: ['./salary-chart.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SalaryChartComponent implements OnInit {\n\n  @Input()\n  x: Array<string>;\n\n  @Input()\n  y: Array<ChartDataSets>;\n  //y: Array<number>;\n\n/*   @Input()\n  yLabel: string; */\n\n\n  constructor() { \n    \n  }\n\n  public barChartOptions: ChartOptions = {\n    responsive: true,\n    scales: {\n      yAxes: [{\n        ticks: {\n          beginAtZero: true\n        }\n      }]\n    },\n    plugins: {\n      datalabels: {\n        anchor: 'end',\n        align: 'end'\n      }\n    }\n  };\n  public barChartLabels: Label[] = ['2006', '2007', '2008', '2009', '2010', '2011', '2012'];\n  public barChartType: ChartType = 'bar';\n  public barChartLegend = true;\n  public barChartPlugins = [pluginDataLabels];\n  public barChartData: ChartDataSets[] = [\n    {data: [65, 59, 80, 81, 56, 55, 40], label: 'Series A'},\n    {data: [28, 48, 40, 19, 86, 27, 90], label: 'Series B'}\n  ];\n\n  public chartColors: Array<any> = [\n    { // first color\n      backgroundColor: 'rgba(120,120,120,1)',\n      borderColor: 'rgba(225,10,24,0.2)',\n      pointBackgroundColor: 'rgba(225,10,24,0.2)',\n      pointBorderColor: '#fff',\n      pointHoverBackgroundColor: '#fff',\n      pointHoverBorderColor: 'rgba(225,10,24,0.2)'\n    },\n    { // second color\n      backgroundColor: 'rgba(150,150,150,1)',\n      borderColor: 'rgba(225,10,24,0.2)',\n      pointBackgroundColor: 'rgba(225,10,24,0.2)',\n      pointBorderColor: '#fff',\n      pointHoverBackgroundColor: '#fff',\n      pointHoverBorderColor: 'rgba(225,10,24,0.2)'\n    }];\n\n  ngOnInit() {\n    \n  }\n\n  ngOnChanges() {\n    if (this.x && this.y) {\n      this.barChartLabels = this.x;\n      this.barChartData = this.y;\n      /* this.barChartData = new Array<ChartDataSets>({\n        data: this.y,\n        label: this.yLabel ?? ''\n      }); */\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./salary-chart.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\n<canvas baseChart\n        [datasets]=\"barChartData\"\n        [labels]=\"barChartLabels\"\n        [options]=\"barChartOptions\"\n        [legend]=\"barChartLegend\"\n        [plugins]=\"barChartPlugins\"\n        [colors]=\"chartColors\"\n        [chartType]=\"barChartType\">\n</canvas>\n</div>"
        },
        {
            "name": "SalaryComponent",
            "id": "component-SalaryComponent-9ff3b8faf767572585fb3979917f185a",
            "file": "src/app/pages/salary/salary.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-salary",
            "styleUrls": [
                "./salary.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./salary.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addEntryIcon",
                    "defaultValue": "getIconWithName('plus-circle-line')",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "addEntryLabel",
                    "defaultValue": "\"Add Salary\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "createSalaryLastResult",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "data",
                    "type": "Array<Gehalt>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "deleteConfirmMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "deletionEntry",
                    "type": "Gehalt",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "footerText",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "groupCellIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "header",
                    "defaultValue": "[]",
                    "type": "Array<TableHeader>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hideToast",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "jsonDetails",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "monthFilterBy",
                    "defaultValue": "null",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "newSalaryEntry",
                    "defaultValue": "new Gehalt({\n    Arbeitgeber: 'Daimler Truck AG',\n    Wochenstunden: 35,\n    Jahr: new Date().getFullYear(),\n    Monat: new Date().getMonth()\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pageTitle",
                    "defaultValue": "\"Payments\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "rows",
                    "defaultValue": "[]",
                    "type": "Array<TableRow>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "showAddEntry",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "tableSize",
                    "defaultValue": "TableSize.Medium",
                    "type": "TableSize",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "tableSizeEnum",
                    "defaultValue": "TableSize",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "yearButtons",
                    "defaultValue": "[]",
                    "type": "Array<Button>",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "yearFilterMulti",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 282,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createFooter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 274,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "createHeader",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "createSalary",
                    "args": [
                        {
                            "name": "item",
                            "type": "Gehalt"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 231,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Gehalt",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteSalaryEntry",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Gehalt"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 257,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "Gehalt",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapToTableModel",
                    "args": [
                        {
                            "name": "data",
                            "type": "Array<Gehalt>"
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<TableRow>",
                    "typeParameters": [],
                    "line": 121,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Array<Gehalt>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80
                },
                {
                    "name": "openModal",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 278,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetNewSalaryItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 250,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "rowClicked",
                    "args": [
                        {
                            "name": "row",
                            "type": "TableRow"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "TableRow",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSize",
                    "args": [
                        {
                            "name": "size",
                            "type": "TableSize"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "size",
                            "type": "TableSize",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showEntryAsJson",
                    "args": [
                        {
                            "name": "entry",
                            "type": "Gehalt"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "entry",
                            "type": "Gehalt",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSalaryResultWithTimer",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 225,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleNewEntryForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 214,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "updateEntries",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { CurrencyPipe } from '@angular/common';\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { getIconWithName } from 'src/app/data/iconFactory';\nimport { ApiService } from 'src/app/services/api.service';\nimport { Gehalt } from 'src/app/services/models/gehalt';\nimport { NavigationService } from 'src/app/services/navigation.service';\nimport { timer } from 'rxjs';\nimport { ModalService } from 'src/app/modalModule';\nimport { Button, ITableCell, TableRow, TableRowAction, TableHeader, TableSize, TextTableCell } from 'src/app/ui';\nimport '../../util/arrayExtensions';\nimport '../../util/numberExtensions';\nimport { environment } from 'src/environments/environment';\nimport { StyledTextTableCell } from 'src/app/ui/models/table/styledTextTableCell';\n\n\n\n@Component({\n  selector: 'app-salary',\n  templateUrl: './salary.component.html',\n  styleUrls: ['./salary.component.scss']\n})\nexport class SalaryComponent implements OnInit {\n  public pageTitle = \"Payments\";\n\n  private data: Array<Gehalt>;\n\n  public tableSizeEnum = TableSize;\n  public hideToast: boolean = true;\n\n  public rows: Array<TableRow> = [];\n  public header: Array<TableHeader> = [];\n  //public groupCell: ITableCell;\n  public groupCellIndex: number;\n  public tableSize: TableSize = TableSize.Medium;\n  public footerText: string;\n\n  public showAddEntry: boolean = false;\n  public addEntryLabel: string = \"Add Salary\";\n  public addEntryIcon: string = getIconWithName('plus-circle-line');\n  public createSalaryLastResult: string = '';\n\n  // Month filter\n  public monthFilterBy: number = null;\n\n  // Json Dialog\n  public jsonDetails: string;\n\n  // Delete Confirm\n  public deleteConfirmMessage: string;\n  public deletionEntry: Gehalt;\n\n  // Butttons\n  public yearButtons: Array<Button> = [];\n  public yearFilterMulti: boolean = true;\n\n  public newSalaryEntry = new Gehalt({\n    Arbeitgeber: 'Daimler Truck AG',\n    Wochenstunden: 35,\n    Jahr: new Date().getFullYear(),\n    Monat: new Date().getMonth()\n  });\n\n  constructor(\n    private api: ApiService,\n    private navigationService: NavigationService,\n    private modalService: ModalService,\n    private currencyPipe: CurrencyPipe\n    ) { \n\n    this.navigationService.activeMenu.next(2);\n    this.updateEntries();\n\n  }\n\n  public setSize(size: TableSize) {\n    this.tableSize = size;\n  }\n\n  ngOnInit(): void {\n    \n  }\n\n  private updateEntries() {\n    // Get Data from API\n    this.api.setService(\"gehalt\");\n    this.api.getAllEntries<Gehalt>().subscribe(\n      result => {\n        this.data = result.body;\n        if (environment.mockData) {\n          this.data.map(d => d.Netto = d.Netto * 63 * Math.random());\n          this.data.map(d => d.Brutto  = d.Brutto * 24 * Math.random());\n        }\n\n        if (this.monthFilterBy) {\n          this.data = this.data.filter(d => d.Monat == this.monthFilterBy);\n        }\n        this.data = this.data.SortDescending('id');\n\n        // Map to generic table model\n        this.rows = this.mapToTableModel(this.data);\n      }\n    );\n  }\n\n  public rowClicked(row: TableRow) {\n/*  Maybe future use ... conflicts with icon on-click \n    let id = row.cells.map(r => r.id)[0];\n    this.api.getEntry<Gehalt>(id).subscribe(\n      result => {\n        this.showEntryAsJson(result.filter(r => r.id == id).First());\n      }\n    ); */\n  }\n\n  private showEntryAsJson(entry: Gehalt) {\n    this.jsonDetails = JSON.stringify(entry, undefined, 2);\n    this.openModal('json');\n  }\n\n  private mapToTableModel(data: Array<Gehalt>): Array<TableRow> {\n    this.createHeader();\n    this.createFooter();\n\n    let result = new Array<TableRow>();\n    data.forEach(entry => {\n      let row = new TableRow();\n           \n      // Actions\n      let action = new TableRowAction();\n      action.tooltip = \"Delete\";\n      action.icon = getIconWithName(\"trash-line\");\n      action.action = (id: number) => {\n        this.deletionEntry = entry;\n        this.deleteConfirmMessage = `Confirm Entry deletion: Id=${entry.id}: ${entry.Jahr}/${entry.Monat.PadWithZero()}?`;\n        this.openModal('delete-confirmation');\n      };\n      row.actions.push(action); \n      \n      let info = new TableRowAction();\n      info.tooltip = \"Log\";\n      info.icon = getIconWithName('info-standard-line');\n      info.action = () => {\n        this.showEntryAsJson(entry);\n      };\n      row.actions.push(info);\n\n      // Cells\n      let cell = new TextTableCell({ id: entry.id, label: entry.id ? `${entry.id}` : \"n/a\"});\n      row.cells.push(cell);\n      \n      cell = new StyledTextTableCell({ id: entry.id, label:`${entry.Jahr}`, style:{ 'font-weight': '500' }});\n      row.cells.push(cell);\n\n      cell = new StyledTextTableCell({ \n        id: entry.id, \n        label: entry.Monat.PadWithZero(), \n        style:{ 'font-weight': '500' },\n        actionIcon: this.monthFilterBy ? getIconWithName('filter-solid'): getIconWithName('filter-line'), \n        action: () => {\n          if (!this.monthFilterBy) {\n            this.monthFilterBy = entry.Monat;\n            this.groupCellIndex = null;\n            this.updateEntries();\n          } else {\n            this.monthFilterBy = null;\n            this.groupCellIndex = 1;\n            this.updateEntries();\n          }\n        } \n      });\n      row.cells.push(cell);\n      \n      cell = new TextTableCell({ id: entry.id, label:`${this.currencyPipe.transform(entry.Brutto)}`});\n      row.cells.push(cell);\n      \n      cell = new TextTableCell({ id: entry.id, label:`${this.currencyPipe.transform(entry.Netto)}`});\n      row.cells.push(cell);\n            \n      cell = new TextTableCell({ id: entry.id, label:`${this.currencyPipe.transform(entry.AKP)}`});\n      row.cells.push(cell);\n            \n      cell = new TextTableCell({ id: entry.id, label:`${this.currencyPipe.transform(entry.Kantine)}`});\n      row.cells.push(cell);\n            \n      cell = new TextTableCell({ id: entry.id, label:`${entry.Wochenstunden}`});\n      row.cells.push(cell);\n\n      result.push(row);\n    })\n\n    return result;\n  }\n\n  private createHeader() {\n    let header: Array<TableHeader> = [];\n\n    header.push({ label: 'No.' });\n    header.push({ label: 'Jahr' });\n    header.push({ label: 'Monat' });\n    header.push({ label: 'Brutto' });\n    header.push({ label: 'Netto' });\n    header.push({ label: 'AKP' });\n    header.push({ label: 'Kantine' });\n    header.push({ label: 'Stunden/Woche' });\n    this.header = header;\n    \n    if (!this.monthFilterBy) {\n      this.groupCellIndex = 1;\n    }\n    \n  }\n\n  public toggleNewEntryForm() {\n    this.showAddEntry = !this.showAddEntry;\n    if (this.showAddEntry) {\n      this.addEntryLabel = \"Close Form\";\n      this.addEntryIcon = getIconWithName('times-circle-line');\n    } else {\n      this.addEntryLabel = \"Add Salary\";\n      this.addEntryIcon = getIconWithName('plus-circle-line');\n    }\n  }\n\n  private showSalaryResultWithTimer(message: string) {\n    this.createSalaryLastResult = message;\n    const salaryLastResultTimer = timer(10000);\n    salaryLastResultTimer.subscribe(v => this.createSalaryLastResult = '');\n  }\n\n  public createSalary(item: Gehalt) {\n    console.log(item);\n    this.api.createEntry<Gehalt>(item).subscribe(\n        res => {\n          var response = <HttpResponse<Gehalt>>res;\n          this.showSalaryResultWithTimer(`POST Gehalt Eintrag ${item.Jahr}/${item.Monat}: HTTP Code ${response.status}`);\n\n          if (res.ok) {\n            this.resetNewSalaryItem();\n            this.toggleNewEntryForm();\n            this.updateEntries();\n          }\n        },\n        (err: HttpErrorResponse) => {\n          this.showSalaryResultWithTimer(`Error creating the salary entry!: ${err}`);\n        }\n      );\n  }\n\n  private resetNewSalaryItem() {\n    this.newSalaryEntry.Brutto = null;\n    this.newSalaryEntry.Netto = null;\n    this.newSalaryEntry.Kantine = null;\n    this.newSalaryEntry.AKP = null;\n  }\n\n  public deleteSalaryEntry($event: Gehalt) {\n    if ($event) {\n      // Call the API to delete the entry\n      this.api.setService(\"gehalt\");\n      this.api.deleteEntry<Gehalt>($event.Jahr, $event.Monat).subscribe({\n        next: (res) => {\n          this.showSalaryResultWithTimer(`Item ${$event.id}: ${$event.Jahr}/${$event.Monat} Deletion: HTTP Code ${res.status} ${res.statusText}`);\n          this.updateEntries();\n        },\n        error: (err) => {\n          this.showSalaryResultWithTimer(`Item ${$event.id} Deletion Failed: ${err}`);\n        }\n      });\n    }\n    this.closeModal('delete-confirmation');\n  }\n\n  private createFooter() {\n    this.footerText = `${this.data.map(d => d.Jahr).Distinct().length} Years (${ this.data.map(d => d.Monat).length} Months)`;\n  }\n\n  openModal(id: string) {\n    this.modalService.open(id);\n  }\n\n  closeModal(id: string) {\n    this.modalService.close(id);\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./salary.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService"
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService"
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService"
                    },
                    {
                        "name": "currencyPipe",
                        "type": "CurrencyPipe"
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "currencyPipe",
                        "type": "CurrencyPipe",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"page\">\n    <app-page-header>\n        <div class=\"left\">{{ pageTitle }}</div>\n        <div class=\"right\">\n            <span class=\"status-text\">{{ createSalaryLastResult }}</span>\n            <app-menu-button [label]=\"addEntryLabel\" [icon]=\"addEntryIcon\" iconSize=18 (clickEvent)=\"toggleNewEntryForm()\"></app-menu-button>\n            <!-- Source: https://getbootstrap.com/docs/5.0/components/button-group/ -->\n            <div class=\"btn-group btn-group-sm\" style=\"float: right; margin-bottom: .5em;\" role=\"group\" aria-label=\"Table Size\">\n                <button type=\"button\" class=\"btn\" [ngClass]=\"tableSize == tableSizeEnum.Small ? 'btn-secondary' : 'btn-outline-secondary'\" (click)=\"setSize(tableSizeEnum.Small)\">S</button>\n                <button type=\"button\" class=\"btn\" [ngClass]=\"tableSize == tableSizeEnum.Medium ? 'btn-secondary' : 'btn-outline-secondary'\" (click)=\"setSize(tableSizeEnum.Medium)\">M</button>\n                <button type=\"button\" class=\"btn\" [ngClass]=\"tableSize == tableSizeEnum.Large ? 'btn-secondary' : 'btn-outline-secondary'\" (click)=\"setSize(tableSizeEnum.Large)\">L</button>\n            </div>\n        </div>\n    </app-page-header>\n    \n  <!--   <app-inline-button-group [buttons]=\"yearButtons\" [multiSelect]=\"yearFilterMulti\" (selectedButtons)=\"yearFilterChanged($event)\"></app-inline-button-group>  -->\n\n    <app-salary-add-entry *ngIf=\"showAddEntry\" [model]=\"newSalaryEntry\" (newEntry)=\"createSalary($event)\"></app-salary-add-entry>\n    <p></p>\n    <app-table \n        [header]=\"header\" \n        [rows]=\"rows\" \n        [size]=\"tableSize\" \n        [footer]=\"footerText\"\n        collapseGroupsByDefault=true \n        [groupColumnIndex]=\"groupCellIndex\"\n        (rowAction)=\"rowClicked($event)\">\n    </app-table>\n</div>\n\n<jw-modal id=\"json\" class=\"small-modal\">\n    <h3>Salary Data</h3>\n    <app-show-json [content]=\"jsonDetails\"></app-show-json>\n    <button type=\"button\" class=\"btn btn-primary\" style=\"float: right;\" (click)=\"closeModal('json');\">\n        Close\n    </button>\n</jw-modal>\n\n<jw-modal id=\"delete-confirmation\" class=\"small-modal\">\n    <h3>Really Delete Entry</h3>\n    <p>{{deleteConfirmMessage}}</p>\n    <button type=\"button\" class=\"btn btn-danger\" (click)=\"deleteSalaryEntry(deletionEntry)\">\n        Delete\n    </button>\n    &nbsp;\n    <button type=\"button\" class=\"btn btn-primary\" style=\"float: right;\" (click)=\"closeModal('delete-confirmation');\">\n        Close\n    </button>\n</jw-modal>"
        },
        {
            "name": "SalaryYearTileComponent",
            "id": "component-SalaryYearTileComponent-711f994dfd33cc8663a0459c0c5f5849",
            "file": "src/app/components/salary-year-tile/salary-year-tile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-salary-year-tile",
            "styleUrls": [
                "./salary-year-tile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./salary-year-tile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "line": 16,
                    "type": "Array<Gehalt>"
                },
                {
                    "name": "percent",
                    "line": 19,
                    "type": "number"
                },
                {
                    "name": "year",
                    "defaultValue": "0",
                    "line": 13,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "details",
                    "defaultValue": "new EventEmitter<Array<Gehalt>>()",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "showDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "summarize",
                    "args": [
                        {
                            "name": "attibute",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 29,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "attibute",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\nimport { Gehalt } from 'src/app/services/models/gehalt';\n\n@Component({\n  selector: 'app-salary-year-tile',\n  templateUrl: './salary-year-tile.component.html',\n  styleUrls: ['./salary-year-tile.component.scss']\n})\nexport class SalaryYearTileComponent implements OnInit {\n\n  @Input()\n  year: number = 0;\n\n  @Input()\n  data: Array<Gehalt> = [];\n\n  @Input()\n  percent: number;\n\n  @Output()\n  details = new EventEmitter<Array<Gehalt>>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  public summarize(attibute: string): number {\n    let result =  this.data.reduce((p, c) => p + c[attibute], 0);\n    return result;\n  }\n\n  public showDetails() {\n    this.details.emit(this.data);\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card {\n    -webkit-box-shadow: 0 0 0.7em 0 #e0e0e0;\n    -moz-box-shadow: 0 0 0.7em 0 #e0e0e0;\n    box-shadow: 0 0 0.7em 0  #e0e0e0;\n}\n\n.card-header {\n    font-weight: 700;\n    font-size: large;\n    display: flex;\n}\n\n.kpi-label {\n    font-size: small;\n    font-weight: 400;\n    color: #909090;\n    margin-bottom: .2em;\n}\n\n.card-link {\n    cursor: pointer;\n    font-weight: 500;\n    color: #007a93;\n    font-size: small;\n    float: right;\n}\n\n.header-info {\n    float: right;\n    font-size: small;\n    font-weight: 400;\n    color: #909090;\n    margin-left: auto;\n    align-self: center;\n}",
                    "styleUrl": "./salary-year-tile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 22
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"col mb-4\">\n    <div class=\"card text-black\">\n        <div class=\"card-header\">\n            {{ year }}\n            <span class=\"header-info\">{{ data.length }} months</span>\n        </div>\n        <div class=\"card-body\">\n            <h5 class=\"card-title\">\n                <div class=\"kpi-label\">BRUTTO</div>\n                {{ summarize(\"Brutto\") | currency }} \n                <app-badge *ngIf=\"percent\" filled=true style=\"float: right;\" [customClass]=\"percent > 0 ? 'green' : 'red'\" [label]=\"percent/100 | percent: '1.2-2'\"></app-badge>\n            </h5>\n            <h5 class=\"card-title\">\n                <div class=\"kpi-label\">NETTO</div>\n                {{ summarize(\"Netto\") | currency }} \n            </h5>\n            <p class=\"card-text\"><span class=\"card-link\" (click)=\"showDetails()\">Show Details</span></p>\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "ShowJsonComponent",
            "id": "component-ShowJsonComponent-e20d35a1519a0d4fd20c003004738f3c",
            "file": "src/app/ui/show-json/show-json.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-show-json",
            "styleUrls": [
                "./show-json.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./show-json.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "line": 11,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-show-json',\n  templateUrl: './show-json.component.html',\n  styleUrls: ['./show-json.component.scss']\n})\nexport class ShowJsonComponent implements OnInit {\n\n  @Input()\n  content: string;\n\n  \n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./show-json.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div style=\"padding: .5em;\">\n    <pre>{{ content }}</pre>\n</div>"
        },
        {
            "name": "StateProgressComponent",
            "id": "component-StateProgressComponent-01f11d38f3f13f860d73e6ae87a56cd6",
            "file": "src/app/ui/state-progress/state-progress.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-state-progress",
            "styleUrls": [
                "./state-progress.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./state-progress.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "size",
                    "defaultValue": "'S'",
                    "description": "<p>State Progress Size in categories<br>Basesize (size of one <code>StateItem</code>):</p>\n<ul>\n<li>S: 20px  </li>\n<li>M: 25px  </li>\n<li>L: 30px  </li>\n</ul>\n",
                    "line": 35,
                    "type": "\"M\" | \"S\" | \"L\""
                },
                {
                    "name": "states",
                    "description": "<p>List of StateItems to ne shown as Progress Component<br>This can be of type <code>DefaultStateItem</code> or <code>NumberStateItem</code></p>\n",
                    "line": 24,
                    "type": "Array<StateItem>"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<StateItem>()",
                    "line": 38,
                    "type": "EventEmitter"
                },
                {
                    "name": "onMouseOver",
                    "defaultValue": "new EventEmitter<StateItem>()",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "StateEnum",
                    "defaultValue": "State",
                    "type": "",
                    "optional": false,
                    "description": "<p>Internally used Enum helper to use in Template</p>\n",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "bgColorClassForNumberState",
                    "args": [
                        {
                            "name": "state",
                            "type": "State"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 111,
                    "description": "<p>Returns the background color for a <code>NumberStateItem</code> based on its state<br><em>(used in template only)</em></p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2441,
                                "end": 2446,
                                "flags": 0,
                                "escapedText": "state"
                            },
                            "type": "State",
                            "tagName": {
                                "pos": 2435,
                                "end": 2440,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>State (Enum)</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2466,
                                "end": 2473,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>string</p>\n"
                        }
                    ]
                },
                {
                    "name": "colorClassForNumberState",
                    "args": [
                        {
                            "name": "state",
                            "type": "State"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 91,
                    "description": "<p>Returns the foreground color for a <code>NumberStateItem</code> based on its state<br><em>(used in template only)</em></p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1983,
                                "end": 1988,
                                "flags": 0,
                                "escapedText": "state"
                            },
                            "type": "State",
                            "tagName": {
                                "pos": 1977,
                                "end": 1982,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>State (Enum)</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2008,
                                "end": 2015,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>string</p>\n"
                        }
                    ]
                },
                {
                    "name": "getIconSize",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "handleStepClick",
                    "args": [
                        {
                            "name": "item",
                            "type": "StateItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "description": "<p>Handles a click on one <code>StateItem</code></p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1339,
                                "end": 1343,
                                "flags": 0,
                                "escapedText": "item"
                            },
                            "type": "StateItem",
                            "tagName": {
                                "pos": 1333,
                                "end": 1338,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>StateItem</p>\n"
                        }
                    ]
                },
                {
                    "name": "handleStepHover",
                    "args": [
                        {
                            "name": "item",
                            "type": "StateItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "description": "<p>Handles the mouse over event on one <code>StateItem</code> </p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1510,
                                "end": 1514,
                                "flags": 0,
                                "escapedText": "item"
                            },
                            "type": "StateItem",
                            "tagName": {
                                "pos": 1504,
                                "end": 1509,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>StateItem</p>\n"
                        }
                    ]
                },
                {
                    "name": "isNumberState",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 81,
                    "description": "<p>Is this State Item a <code>NumberStateItem</code><br>(used in template only)</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1708,
                                "end": 1713,
                                "flags": 0,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "tagName": {
                                "pos": 1702,
                                "end": 1707,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>number</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1727,
                                "end": 1734,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>boolean</p>\n"
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { NumberStateItem } from './model/numberStateItem';\nimport { State } from './model/state';\nimport { StateItem } from './model/stateItem';\n\n@Component({\n  selector: 'app-state-progress',\n  templateUrl: './state-progress.component.html',\n  styleUrls: ['./state-progress.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StateProgressComponent {\n\n  /**\n   * Internally used Enum helper to use in Template\n   */\n  StateEnum = State;\n\n  /**\n   * List of StateItems to ne shown as Progress Component   \n   * This can be of type `DefaultStateItem` or `NumberStateItem`\n   */\n  @Input()\n  states: Array<StateItem>;\n\n  /**\n   * State Progress Size in categories   \n   * Basesize (size of one `StateItem`):\n   * - S: 20px  \n   * - M: 25px  \n   * - L: 30px  \n   * \n   */\n  @Input()\n  size: 'M' | 'S' | 'L' = 'S';\n\n  @Output()\n  onClick = new EventEmitter<StateItem>();\n\n  @Output()\n  onMouseOver = new EventEmitter<StateItem>();\n\n  constructor() { \n  }\n\n  getIconSize(): number {\n    switch (this.size) {\n      case 'M':\n        return 25;\n      case 'L':\n        return 30;\n      case 'S':\n        return 20;\n      default:\n        return 0;\n    }\n  }\n\n  /**\n   * Handles a click on one `StateItem`\n   * @param item StateItem\n   */\n  public handleStepClick(item: StateItem) {\n    this.onClick.emit(item);\n  }\n\n  /**\n   * Handles the mouse over event on one `StateItem` \n   * @param item StateItem\n   */\n  public handleStepHover(item: StateItem) {\n    this.onMouseOver.emit(item);\n  } \n\n  /**\n   * Is this State Item a `NumberStateItem`   \n   * (used in template only)\n   * @param index number\n   * @returns boolean\n   */\n  isNumberState(index: number): boolean {\n    return this.states[index] instanceof NumberStateItem;\n  }\n\n  /**\n   * Returns the foreground color for a `NumberStateItem` based on its state   \n   * *(used in template only)*\n   * @param state State (Enum)\n   * @returns string\n   */\n  colorClassForNumberState(state: State): string {\n    switch (state) {\n      case State.FAILED:\n        return '#F20D0D';\n      case State.SUCCESS:\n        return '#57CC33';\n      case State.WARNING:\n        return '#E6A91A';\n      default:\n        break;\n    }\n    return '';\n  }\n\n  /**\n   * Returns the background color for a `NumberStateItem` based on its state   \n   * *(used in template only)*\n   * @param state State (Enum)\n   * @returns string\n   */\n  bgColorClassForNumberState(state: State): string {\n    switch (state) {\n      case State.FAILED:\n        return '#FBB9B9';\n      case State.SUCCESS:\n        return '#D1F1C7';\n      case State.WARNING:\n        return '#F3D58F';\n      default:\n        break;\n    }\n    return '';\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".state-progress-container {\n\n    &.small {\n        --basesize: 20px;\n        --linewidth: 10px;\n        --numpadding: 5px;\n        --numfont: .55rem;\n    }\n    \n    &.medium {\n        --basesize: 25px;\n        --linewidth: 15px;\n        --numpadding: 7px;\n        --numfont: .6rem;\n    }\n\n    &.large {\n        --basesize: 30px;\n        --linewidth: 20px;\n        --numpadding: 8px;\n        --numfont: .8rem;\n    }\n \n    display: inline-grid;\n    grid-template-columns: repeat(6, calc(var(--basesize) + var(--linewidth)));\n    grid-template-rows: var(--basesize);\n    column-gap: 0px;\n    justify-items: stretch;\n    align-items: stretch;\n\n    .state-progress-item {\n        grid-row: 0;\n        display: flex;\n        cursor: pointer;\n    \n        .state-progress-line {\n            align-items: center;\n            display: inline-flex;\n            text-align: center;\n\n            > hr {\n                border-top: 1px solid #c0c0c0;\n                width: calc(var(--linewidth) - 2px); \n            }\n        }\n\n        .state-progress-spinner {\n            width: calc(var(--basesize) - 2px);\n            height: calc(var(--basesize) - 2px);\n        }\n\n        .state-progress-number {\n            border: 1px solid grey;\n            border-radius: var(--basesize);\n            padding: 3px;\n            padding-right: var(--numpadding); \n            padding-left: var(--numpadding); \n            margin: 1px;\n            display: flex;\n            align-items: center;\n            text-align: center;\n            font-size: var(--numfont);\n            color: black;\n        }\n\n        .grey {\n            color:#c0c0c0;\n        }\n    }\n}",
                    "styleUrl": "./state-progress.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 41
            },
            "templateData": "<div class=\"state-progress-container\" [class.medium]=\"size == 'M'\" [class.small]=\"size == 'S'\" [class.large]=\"size == 'L'\">\n    <ng-container *ngFor=\"let step of states; let i = index;\">\n        <div class=\"state-progress-item\" (click)=\"handleStepClick(step)\" (mouseover)=\"handleStepHover(step)\">\n            <clr-icon *ngIf=\"!isNumberState(i) && step.state == StateEnum.SKIPPED\" shape=\"success-standard\"  [attr.size]=\"getIconSize()\" class=\"grey\"></clr-icon>\n            <clr-icon *ngIf=\"!isNumberState(i) && step.state == StateEnum.SUCCESS\" shape=\"success-standard\"  [attr.size]=\"getIconSize()\" class=\"is-success is-solid\"></clr-icon>\n            <clr-icon *ngIf=\"!isNumberState(i) && step.state == StateEnum.FAILED\" shape=\"error-standard\"  [attr.size]=\"getIconSize()\" class=\"is-error is-solid\"></clr-icon>\n            <clr-icon *ngIf=\"!isNumberState(i) && step.state == StateEnum.WARNING\" shape=\"error-standard\"  [attr.size]=\"getIconSize()\" class=\"is-warning is-solid\"></clr-icon>\n            <clr-icon *ngIf=\"!isNumberState(i) && step.state == StateEnum.NONE\" shape=\"circle\" [attr.size]=\"getIconSize()\" class=\"grey\"></clr-icon>\n            <span *ngIf=\"!isNumberState(i) && step.state == StateEnum.IN_PROGRESS\" class=\"spinner spinner-sm state-progress-spinner\"></span>\n\n            <span *ngIf=\"isNumberState(i)\" class=\"state-progress-number\" [ngStyle]=\"{ 'border-color': colorClassForNumberState(step.state), 'background-color': bgColorClassForNumberState(step.state) }\">\n                {{ step.value }}\n            </span>\n\n            <div *ngIf=\"i < states.length - 1\" class=\"state-progress-line\"><hr/></div>\n        </div>\n    </ng-container>\n</div>"
        },
        {
            "name": "SubNavigationComponent",
            "id": "component-SubNavigationComponent-70b1dd02c06207638466b2330d70bfbd",
            "file": "src/app/ui/sub-navigation/sub-navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sub-navigation",
            "styleUrls": [
                "./sub-navigation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sub-navigation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "routes",
                    "defaultValue": "[]",
                    "line": 12,
                    "type": "Array<Route>"
                }
            ],
            "outputsClass": [
                {
                    "name": "submenuActivated",
                    "defaultValue": "new EventEmitter<Route>()",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isCurrentRoute",
                    "args": [
                        {
                            "name": "item",
                            "type": "Route"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Route",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "itemClicked",
                    "args": [
                        {
                            "name": "item",
                            "type": "Route"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Route",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ActivatedRoute, Route } from '@angular/router';\n\n@Component({\n  selector: 'app-sub-navigation',\n  templateUrl: './sub-navigation.component.html',\n  styleUrls: ['./sub-navigation.component.scss']\n})\nexport class SubNavigationComponent implements OnInit {\n\n  @Input()\n  routes: Array<Route> = [];\n  \n  @Output()\n  submenuActivated = new EventEmitter<Route>();\n\n  constructor(\n    private activatedRoute: ActivatedRoute\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n  public isCurrentRoute(item: Route): boolean {\n    return this.activatedRoute.routeConfig == item;\n  }\n\n  public itemClicked(item: Route) {\n    this.submenuActivated.emit(item);\n    console.log(item);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".csgp-subnav-container-grid {\n    background-color: transparent;\n    display: grid;\n    grid-template-columns: repeat(10, 130px) 1fr;\n    grid-template-rows: 40px;\n    column-gap: 10px;\n    justify-items: stretch;\n}\n.csgp-subnav-container {\n    background-color: transparent;\n    display: flex\n}\n\n\n.csgp-subnav-item {\n    display: flex;\n    flex-direction: row;\n    justify-content: left;\n    align-items: center;\n    cursor: pointer;\n    font-weight: 400;\n    font-size: 1.1rem;\n    padding: .4rem .9rem .4rem .4rem;\n    &:hover {\n        background-color: #e0e0e0;\n    }\n    \n    .icon {\n        margin-right: .3rem;\n        width: 22px;\n    }\n\n    &.active {\n        font-weight: 600;\n        color: #0071a8;\n    }\n}",
                    "styleUrl": "./sub-navigation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"csgp-subnav-container\">\n    <ng-container *ngFor=\"let item of routes\">\n        <div class=\"csgp-subnav-item\"  [class]=\"isCurrentRoute() ? 'active' : ''\" (click)=\"itemClicked(item)\">\n            <img [src]=\"item.data.icon\" class=\"icon\"/>\n            {{ item.data.label }}\n        </div>\n    </ng-container>\n</div>\n"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-ecf4d7c830e724e0877877dacfedb658",
            "file": "src/app/ui/table/table.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-table",
            "styleUrls": [
                "./table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "collapseGroupsByDefault",
                    "defaultValue": "false",
                    "line": 34,
                    "type": "boolean"
                },
                {
                    "name": "footer",
                    "defaultValue": "null",
                    "line": 37,
                    "type": "string"
                },
                {
                    "name": "groupColumnIndex",
                    "defaultValue": "null",
                    "line": 31,
                    "type": "number"
                },
                {
                    "name": "header",
                    "defaultValue": "[]",
                    "line": 28,
                    "type": "Array<TableHeader>"
                },
                {
                    "name": "rows",
                    "defaultValue": "[]",
                    "line": 25,
                    "type": "Array<TableRow>"
                },
                {
                    "name": "size",
                    "defaultValue": "TableSize.Small",
                    "line": 40,
                    "type": "TableSize"
                },
                {
                    "name": "sortEntry",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "SortEntry"
                }
            ],
            "outputsClass": [
                {
                    "name": "rowAction",
                    "defaultValue": "new EventEmitter<TableRow>()",
                    "line": 43,
                    "type": "EventEmitter"
                },
                {
                    "name": "sortAction",
                    "defaultValue": "new EventEmitter<SortEntry>()",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "excludeGroupsInTable",
                    "defaultValue": "[]",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "firstLoad",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "tableSizeEnum",
                    "defaultValue": "TableSize",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "callback",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        },
                        {
                            "name": "$event",
                            "type": "TableRowAction"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "$event",
                            "type": "TableRowAction",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cellAction",
                    "args": [
                        {
                            "name": "cell",
                            "type": "ITableCell"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "cell",
                            "type": "ITableCell",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createGroups",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getNoOfColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 69,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getTotalForColumn",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 125,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "groupRowClick",
                    "args": [
                        {
                            "name": "row",
                            "type": "GroupRow"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "GroupRow",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasActions",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 174,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isGroupRow",
                    "args": [
                        {
                            "name": "row",
                            "type": "TableRow"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 65,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "TableRow",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "rowEvent",
                    "args": [
                        {
                            "name": "row",
                            "type": "TableRow"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "TableRow",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sort",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableHeader"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableHeader",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, OnInit, Output, ViewEncapsulation } from '@angular/core';\nimport { ITableCell } from '../models/table/ITableCell';\nimport { TableRow } from '../models/table/tableRow';\nimport { TableRowAction } from '../models/table/tableRowAction';\nimport { TableSize } from '../models/table/tableSize';\nimport { GroupRow } from '../models/table/groupRow';\nimport '../../util/arrayExtensions';\nimport { TableHeader } from '../models/table/tableHeader';\nimport { SortEntry } from '../models/table/sortEntry';\nimport { NumberTableCell } from '../models/table/numberTableCell';\nimport { Dictionary } from 'src/app/util/dictionary';\nimport { TableSpan } from '../models/table/tableSpan';\n\n@Component({\n  selector: 'app-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class TableComponent implements OnInit, OnChanges {\n  public tableSizeEnum = TableSize;\n\n  @Input()\n  rows: Array<TableRow> = [];\n  \n  @Input()\n  header: Array<TableHeader> = [];\n\n  @Input()\n  groupColumnIndex: number = null;\n\n  @Input()\n  collapseGroupsByDefault: boolean = false;\n\n  @Input()\n  footer: string = null;\n\n  @Input()\n  size: TableSize = TableSize.Small;\n\n  @Output()\n  rowAction = new EventEmitter<TableRow>();\n\n  @Output()\n  sortAction = new EventEmitter<SortEntry>();\n\n  private excludeGroupsInTable: Array<string> = [];\n  private firstLoad: boolean = true;\n  //public spans: Array<TableSpan> = [];\n\n  @Input()\n  public sortEntry: SortEntry = null;\n\n  // TODO: Add \"collapse all groups\" button in group row \n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  ngOnChanges() {\n    this.createGroups();\n  }\n\n  public isGroupRow(row: TableRow) {\n    return row instanceof GroupRow;\n  }\n\n  public getNoOfColumns(): number {\n    return this.header.length + (this.hasActions() ? 1 : 0);\n  }\n\n  private createGroups() {\n    if (this.groupColumnIndex) {\n\n      let colIndex = this.groupColumnIndex; // this.header.indexOf(this.groupColumn);\n      if (colIndex != -1) {\n\n        // Get all non-Group Rows\n        let filterableRows = this.rows.filter(r => !(r instanceof GroupRow));\n        // Get the groups: Distinct column content\n        let labels = filterableRows.map(r => r.cells[colIndex].label).Distinct();\n\n        // Handle Auto-Group\n        if (this.firstLoad && this.collapseGroupsByDefault) { \n          this.excludeGroupsInTable = [];\n          labels.forEach(l => this.excludeGroupsInTable.push(l));\n          this.firstLoad = false;\n        }\n\n        // Create each Group and add its data\n        let result = new Array<TableRow>();\n        labels.forEach(group => {\n          let isCollapsed = this.excludeGroupsInTable.includes(group);\n          // Get Data Rows for current group\n          let groupData = filterableRows.filter(r => r.cells[colIndex].label == group);\n          // Create GroupRow\n          let groupRow = new GroupRow({ groupLabel: group, itemCount: groupData.length, isCollapsed: isCollapsed });\n\n          //---sum\n          for (var i = 0; i < this.header.length ; i++) {\n            if (this.header[i].summarizeWhenGrouped && i != colIndex) {\n              let numberCells = groupData.map(g => g.cells[i]).filter(c => c instanceof NumberTableCell);\n              var sum = 0;\n              numberCells.forEach(c => c.numericValue ?  sum += c.numericValue : c );\n              groupRow.summarizedData.push(sum);\n            } else {\n              groupRow.summarizedData.push(null);\n            }\n          }\n          //-------\n          result.push(groupRow);\n          // Set Hidden Property for data rows\n          for (var i = 0; i < groupData.length ; i++) {\n            groupData[i].hidden = isCollapsed;\n            result.push(groupData[i]);\n          }\n        })\n        this.rows = result;\n      }\n    }\n    //this.spans = this.calculateSpans(this.header);\n  }\n\n  public getTotalForColumn(index: number): number {\n    var result = 0;\n    this.rows.filter(row => row instanceof GroupRow).forEach((row: GroupRow) => {\n      if (row.summarizedData) {\n        result += row.summarizedData[index];\n      }\n    });\n    return result;\n  }\n\n  public sort(column: TableHeader) {\n    let defaultItem = new SortEntry({\n      direction: 'asc',\n      column: column    \n    });\n\n    if (this.sortEntry != null) {\n      if (this.sortEntry.column.label === column.label) {\n        // Sort same column\n        if (this.sortEntry.direction === 'desc') {\n          // Sort deactivation\n          this.sortEntry = null;\n        } else {\n          // Switch direction\n          this.sortEntry.direction = 'desc';\n        }\n      } else {\n        this.sortEntry = defaultItem;\n      }\n    } else {\n      this.sortEntry = defaultItem;\n    }\n    this.sortAction.emit(this.sortEntry);\n  }\n\n  public rowEvent(row: TableRow) {\n    this.rowAction.emit(row);\n  }\n\n  public groupRowClick(row: GroupRow) {\n    if (!this.excludeGroupsInTable.includes(row.groupLabel)) {\n      this.excludeGroupsInTable.push(row.groupLabel);\n    } else {\n      this.excludeGroupsInTable.splice(this.excludeGroupsInTable.indexOf(row.groupLabel), 1);\n    }\n    row.isCollapsed = !row.isCollapsed;\n    this.createGroups();\n  }\n  \n  public hasActions(): boolean {\n    return this.rows.some(r => r.actions.length > 0);\n  }\n\n  public callback(id: number, $event: TableRowAction) {\n    $event.action(id);\n  }\n\n  public cellAction(cell: ITableCell) {\n    cell.action();\n  }\n\n/*   private calculateSpans(input: Array<TableHeader>): Array<TableSpan> {\n    var start = 0;\n    let spans: Array<TableSpan> = [];\n    for (let i = 1; i < input.length; i++) {\n        const item = input[i];\n        if (item.summarizeWhenGrouped) {\n            if (i - start > 1) {\n              spans.push({\n                columnId: start == 0 ? 0 : i,\n                columnsToSpan: i - start\n              })\n                //spans.push(i - start); // prev. colspan\n            }\n            spans.push({\n              columnId: i,\n              columnsToSpan: 1\n            }); // current colspan\n            start = i;\n        }\n    }\n\n    if (input.length - start > 0) \n      //spans.push(input.length - start - 1);\n      spans.push({\n        columnId: null,\n        columnsToSpan: input.length - start - 1\n      })\n    return spans;\n  } */\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n.action-icon {\n    height: 1rem;\n    width:  1rem;\n    cursor: pointer;\n    margin-right: .4rem;\n    margin-left: .4rem;\n    display: inline-flex;\n    margin-bottom: 2px;\n}\n\n.table-header {\n    background-color: white;\n}\n\n.table-row {\n    cursor: pointer;\n    &.even-row {\n        background-color: #f9f9f9;\n    }\n\n    &:hover {\n        background-color: white;\n    }\n}\n\n.table-group {\n    cursor: pointer;\n    background-color: #e5e5e5;\n    font-weight: 600;\n}\n\n.icon {\n    vertical-align: text-top !important;\n    margin-right: .2rem;\n}\n\n.sort-icon {\n    vertical-align: baseline !important;\n\n}\n\n.table {\n    -webkit-box-shadow: 0 0 0.7rem 0 #e0e0e0;\n    -moz-box-shadow: 0 0 0.7rem 0 #e0e0e0;\n    box-shadow: 0 0 0.7rem 0  #e0e0e0;\n\n    &.small {\n        font-size: small;\n    }\n\n    &.medium {\n        font-size: medium;\n    }\n\n    &.large {\n        font-size: large;\n\n    }\n}\n\n/* img {\n    vertical-align: text-top !important;\n    margin-right: .2rem;\n} */",
                    "styleUrl": "./table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 53
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<table class=\"table\" [ngClass]=\"size == tableSizeEnum.Medium ? 'medium' : size == tableSizeEnum.Large ? 'large' : 'small'\">\n    <thead>\n        <tr class=\"table-header\">\n            <th *ngFor=\"let item of header\" scope=\"col\">\n                {{ item.label }}\n                <span style=\"margin-left: 0.4rem; cursor: pointer;\">\n                    <svg *ngIf=\"(item.isSortable && sortEntry == null) || (item.isSortable && sortEntry != null && sortEntry.direction == 'asc') || (item.isSortable && sortEntry != null && sortEntry.column.label !== item.label)\" (click)=\"sort(item)\" version=\"1.1\" width=\"14\" height=\"14\"  viewBox=\"0 0 36 36\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n                        <path [style]=\"sortEntry != null && sortEntry.column.label === item.label ? {'fill': '#0067A7' } : {'fill': '#909090'} \" d=\"M27.66,15.61,18,6,8.34,15.61A1,1,0,1,0,9.75,17L17,9.81V28.94a1,1,0,1,0,2,0V9.81L26.25,17a1,1,0,0,0,1.41-1.42Z\" class=\"clr-i-outline clr-i-outline-path-1\"></path>\n                        <rect x=\"0\" y=\"0\" width=\"36\" height=\"36\" fill-opacity=\"0\"/>\n                    </svg>\n                    <svg *ngIf=\"item.isSortable && sortEntry != null && sortEntry.column.label === item.label && sortEntry.direction == 'desc'\" (click)=\"sort(item)\" version=\"1.1\" width=\"14\" height=\"14\"  viewBox=\"0 0 36 36\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n                        <path fill=\"#0067A7\" transform=\"rotate(180 18 18)\" d=\"M27.66,15.61,18,6,8.34,15.61A1,1,0,1,0,9.75,17L17,9.81V28.94a1,1,0,1,0,2,0V9.81L26.25,17a1,1,0,0,0,1.41-1.42Z\" class=\"clr-i-outline clr-i-outline-path-1\"></path>\n                        <rect x=\"0\" y=\"0\" width=\"36\" height=\"36\" fill-opacity=\"0\"/>\n                    </svg>\n                </span>\n                <span *ngIf=\"item.isGroupable\" style=\"float: right; cursor: pointer;\">\n                    <svg (click)=\"group(item)\" version=\"1.1\" width=\"14\" height=\"14\"  viewBox=\"0 0 36 36\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n                        <path d=\"M15,32H11a1,1,0,0,1-1-1V27a1,1,0,0,1,1-1h4a1,1,0,0,1,1,1v4A1,1,0,0,1,15,32Zm-3-2h2V28H12Z\" class=\"clr-i-outline clr-i-outline-path-1\"></path>\n                        <path d=\"M15,16H11a1,1,0,0,0-1,1v1.2H5.8V12H7a1,1,0,0,0,1-1V7A1,1,0,0,0,7,6H3A1,1,0,0,0,2,7v4a1,1,0,0,0,1,1H4.2V29.8h6.36a.8.8,0,0,0,0-1.6H5.8V19.8H10V21a1,1,0,0,0,1,1h4a1,1,0,0,0,1-1V17A1,1,0,0,0,15,16ZM4,8H6v2H4ZM14,20H12V18h2Z\" class=\"clr-i-outline clr-i-outline-path-2\"></path>\n                        <path d=\"M34,9a1,1,0,0,0-1-1H10v2H33A1,1,0,0,0,34,9Z\" class=\"clr-i-outline clr-i-outline-path-3\"></path>\n                        <path d=\"M33,18H18v2H33a1,1,0,0,0,0-2Z\" class=\"clr-i-outline clr-i-outline-path-4\"></path>\n                        <path d=\"M33,28H18v2H33a1,1,0,0,0,0-2Z\" class=\"clr-i-outline clr-i-outline-path-5\"></path>\n                        <rect x=\"0\" y=\"0\" width=\"36\" height=\"36\" fill-opacity=\"0\"/>\n                    </svg>\n                </span>\n            </th>\n            <th *ngIf=\"hasActions()\">Actions</th>\n        </tr>\n    </thead>\n    <tbody>\n        <ng-container *ngFor=\"let row of rows; let i = index\">\n            <tr *ngIf=\"!isGroupRow(row) && !row.hidden\" class=\"table-row\" (click)=\"rowEvent(row)\" [ngClass]=\"i % 2 == 0 ? 'even-row' : ''\">\n                <td *ngFor=\"let cell of row.cells\" scope=\"row\" [ngStyle]=\"cell.style\">{{ cell.label ? cell.label : cell.numericValue ? cell.numericValue : '' }}\n                    <img *ngIf=\"cell.actionIcon\" class=\"action-icon\" [src]=\"cell.actionIcon\" (click)=\"cellAction(cell)\" />\n                </td>\n                <td *ngIf=\"hasActions()\" >\n                    <img *ngFor=\"let action of row.actions\" class=\"action-icon\" [src]=\"action.icon\" (click)=\"callback(i, action)\" />\n                </td>\n            </tr>\n            <tr *ngIf=\"isGroupRow(row)\" class=\"table-group\" (click)=\"groupRowClick(row)\">\n                <ng-container *ngFor=\"let col of header; let j = index\">\n                    <td *ngIf=\"j == 0\">\n                        <svg *ngIf=\"row.isCollapsed\" class=\"icon\" version=\"1.1\" width=\"18\" height=\"18\"  viewBox=\"0 0 36 36\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n                            <path transform=\"rotate(90 18 18)\" class=\"clr-i-outline clr-i-outline-path-1\" d=\"M29.52,22.52,18,10.6,6.48,22.52a1.7,1.7,0,0,0,2.45,2.36L18,15.49l9.08,9.39a1.7,1.7,0,0,0,2.45-2.36Z\"></path>\n                            <rect x=\"0\" y=\"0\" width=\"36\" height=\"36\" fill-opacity=\"0\"/>\n                        </svg>\n                        <svg *ngIf=\"!row.isCollapsed\" class=\"icon\" version=\"1.1\" width=\"18\" height=\"18\"  viewBox=\"0 0 36 36\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n                            <path transform=\"rotate(180 18 18)\" class=\"clr-i-outline clr-i-outline-path-1\" d=\"M29.52,22.52,18,10.6,6.48,22.52a1.7,1.7,0,0,0,2.45,2.36L18,15.49l9.08,9.39a1.7,1.7,0,0,0,2.45-2.36Z\"></path>\n                            <rect x=\"0\" y=\"0\" width=\"36\" height=\"36\" fill-opacity=\"0\"/>\n                        </svg>\n                        {{ row.groupLabel }}<span *ngIf=\"row.isCollapsed\"> ({{ row.itemCount }})</span>\n                    </td>\n                    <td *ngIf=\"j != 0\">\n                        <span *ngIf=\"row.summarizedData[j]\" style=\"color: #909090; font-weight: 500;\">&sum; {{ row.summarizedData[j].toFixed(2) }}</span>\n                    </td>\n                </ng-container>\n\n<!--    Test with spans:                <ng-container *ngFor=\"let span of spans; let j = index\">\n                    <td *ngIf=\"j == 0\" [attr.colspan]=\"span.columnsToSpan\">\n                        <svg *ngIf=\"row.isCollapsed\" class=\"icon\" version=\"1.1\" width=\"18\" height=\"18\"  viewBox=\"0 0 36 36\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n                            <path transform=\"rotate(90 18 18)\" class=\"clr-i-outline clr-i-outline-path-1\" d=\"M29.52,22.52,18,10.6,6.48,22.52a1.7,1.7,0,0,0,2.45,2.36L18,15.49l9.08,9.39a1.7,1.7,0,0,0,2.45-2.36Z\"></path>\n                            <rect x=\"0\" y=\"0\" width=\"36\" height=\"36\" fill-opacity=\"0\"/>\n                        </svg>\n                        <svg *ngIf=\"!row.isCollapsed\" class=\"icon\" version=\"1.1\" width=\"18\" height=\"18\"  viewBox=\"0 0 36 36\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n                            <path transform=\"rotate(180 18 18)\" class=\"clr-i-outline clr-i-outline-path-1\" d=\"M29.52,22.52,18,10.6,6.48,22.52a1.7,1.7,0,0,0,2.45,2.36L18,15.49l9.08,9.39a1.7,1.7,0,0,0,2.45-2.36Z\"></path>\n                            <rect x=\"0\" y=\"0\" width=\"36\" height=\"36\" fill-opacity=\"0\"/>\n                        </svg>\n                        {{ row.groupLabel }}<span *ngIf=\"row.isCollapsed\"> ({{ row.itemCount }})</span>\n                    </td>\n                    <td *ngIf=\"j != 0\" [attr.colspan]=\"span.columnsToSpan\">\n                        <span *ngIf=\"span.columnId != null && row.summarizedData[span.columnId]\" style=\"color: #909090; font-weight: 500;\">&sum; {{ row.summarizedData[span.columnId].toFixed(2) }}</span>\n                    </td>\n                </ng-container> -->\n                <td *ngIf=\"hasActions()\">\n                </td>\n            </tr>\n        </ng-container>\n    </tbody>\n    <tfoot *ngIf=\"footer\">\n        <tr style=\"background-color: rgb(240, 243, 245);\">\n            <!-- <td [attr.colspan]=\"header.length\">{{ footer }}</td> -->\n            <ng-container *ngFor=\"let col of header; let j = index\">\n                <td *ngIf=\"j == 0\">{{ footer }}</td>\n                <td *ngIf=\"j != 0\">\n                    <span *ngIf=\"col.summarizeWhenGrouped\" style=\"color: #909090; font-weight: 500;\">&sum; {{ getTotalForColumn(j).toFixed(2) }}</span>\n\n                </td>\n            </ng-container>\n\n            <!-- Test with spans:  <ng-container *ngFor=\"let span of spans; let j = index\">\n                <td *ngIf=\"j == 0\" [attr.colspan]=\"span.columnsToSpan\">{{ footer }}</td>\n                <td *ngIf=\"j != 0\" [attr.colspan]=\"span.columnsToSpan\">\n                    <span *ngIf=\"span.columnId != null && header[span.columnId].summarizeWhenGrouped\" style=\"color: #909090; font-weight: 500;\">&sum; {{ getTotalForColumn(span.columnId).toFixed(2) }}</span>\n                </td>\n            </ng-container> -->\n            <td *ngIf=\"hasActions()\"></td>\n        </tr>\n    </tfoot>\n</table>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ExpensesComponent"
                        },
                        {
                            "name": "InsuranceAddEntryComponent"
                        },
                        {
                            "name": "InsuranceComponent"
                        },
                        {
                            "name": "OverviewComponent"
                        },
                        {
                            "name": "SalaryAddEntryComponent"
                        },
                        {
                            "name": "SalaryChartComponent"
                        },
                        {
                            "name": "SalaryComponent"
                        },
                        {
                            "name": "SalaryYearTileComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "ModalModule"
                        },
                        {
                            "name": "UiModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ModalModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ModalComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ModalComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UiModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BadgeComponent"
                        },
                        {
                            "name": "InlineButtonGroupComponent"
                        },
                        {
                            "name": "MenuButtonComponent"
                        },
                        {
                            "name": "NavigationBarComponent"
                        },
                        {
                            "name": "PageHeaderComponent"
                        },
                        {
                            "name": "ShowJsonComponent"
                        },
                        {
                            "name": "StateProgressComponent"
                        },
                        {
                            "name": "SubNavigationComponent"
                        },
                        {
                            "name": "TableComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BadgeComponent"
                        },
                        {
                            "name": "InlineButtonGroupComponent"
                        },
                        {
                            "name": "MenuButtonComponent"
                        },
                        {
                            "name": "NavigationBarComponent"
                        },
                        {
                            "name": "PageHeaderComponent"
                        },
                        {
                            "name": "ShowJsonComponent"
                        },
                        {
                            "name": "StateProgressComponent"
                        },
                        {
                            "name": "SubNavigationComponent"
                        },
                        {
                            "name": "TableComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/badge.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/menu-button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inline-button-group.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/navigation-bar.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/page-header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/show-json.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/state-progress.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/table.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  apiUrl: \"http://192.168.178.129:4100/api\",\n  mockData: false\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  apiUrl: \"http://192.168.178.129:4100/api\",\n  mockData: false\n}"
            },
            {
                "name": "FilledGreen",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/badge.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FilledRed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/badge.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "getIconWithName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/data/iconFactory.ts",
                "type": "",
                "defaultValue": "(name: string): string => {\n    switch (name) {\n        case 'plus-circle-line':\n            return '../assets/icons/plus-circle-line.svg';\n\n        case 'info-standard-line':\n            return '../assets/icons/info-standard-line.svg';\n\n        case 'home-line':\n            return '../assets/icons/home-line.svg';\n\n        case 'trash-line':\n            return \"../assets/icons/trash-line.svg\";\n            \n        case 'wallet-line':\n            return '../assets/icons/wallet-line.svg';\n        \n        case 'shield-line':\n            return '../assets/icons/shield-line.svg';\n            \n        case 'cog-line':\n            return '../assets/icons/cog-line.svg';\n\n        case 'times-circle-line':\n            return '../assets/icons/times-circle-line.svg';\n\n        case 'bar-chart-line':\n            return '../assets/icons/bar-chart-line.svg';\n        \n        case 'filter-line':\n            return '../assets/icons/filter-line.svg';\n\n        case 'filter-solid':\n            return '../assets/icons/filter-solid.svg';\n\n        case 'folder-line':\n            return '../assets/icons/folder-line.svg';\n\n        case 'folder-open-line':\n            return '../assets/icons/folder-open-line.svg';\n        \n        case 'briefcase-line':\n            return '../assets/icons/briefcase-line.svg';\n        \n        case 'pencil-line':\n            return '../assets/icons/pencil-line.svg';\n        \n        case 'slider-line':\n            return '../assets/icons/slider-line.svg';\n    \n        case 'user-line':\n            return '../assets/icons/user-line.svg';\n\n        default:\n            break;\n    }\n}"
            },
            {
                "name": "Green",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/badge.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "header",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/table.stories.ts",
                "type": "Array<TableHeader>",
                "defaultValue": "[\n    { label: 'No.' },\n    { label: 'Name', isSortable: true },\n    { label: 'Kategorie', isGroupable: true },\n    { label: 'Adresse', isGroupable: true, isSortable: true },\n    { label: 'Hausnummer', isSortable: true },\n    { label: 'Gehalt', isSortable: true, summarizeWhenGrouped: true }\n]"
            },
            {
                "name": "Red",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/badge.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "row",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/table.stories.ts",
                "type": "",
                "defaultValue": "new TableRow()"
            },
            {
                "name": "row2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/table.stories.ts",
                "type": "",
                "defaultValue": "new TableRow()"
            },
            {
                "name": "rows",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/table.stories.ts",
                "type": "Array<TableRow>",
                "defaultValue": "[]"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/badge.stories.ts",
                "type": "Story<BadgeComponent>",
                "defaultValue": "(args) => ({\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/menu-button.stories.ts",
                "type": "Story<MenuButtonComponent>",
                "defaultValue": "(args) => ({\n    props: args\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inline-button-group.stories.ts",
                "type": "Story<InlineButtonGroupComponent>",
                "defaultValue": "(args) => ({\n    props: args\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/navigation-bar.stories.ts",
                "type": "Story<NavigationBarComponent>",
                "defaultValue": "(args) => ({\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/page-header.stories.ts",
                "type": "Story<PageHeaderComponent>",
                "defaultValue": "(args) => ({\n    props: args\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/show-json.stories.ts",
                "type": "Story<ShowJsonComponent>",
                "defaultValue": "(args) => ({\n    props: args\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/state-progress.stories.ts",
                "type": "Story<StateProgressComponent>",
                "defaultValue": "(args) => ({\n    props: args\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/table.stories.ts",
                "type": "Story<TableComponent>",
                "defaultValue": "(args) => ({\n    props: args\n})"
            }
        ],
        "functions": [
            {
                "name": "getNYears",
                "file": "src/app/util/getNYears.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "noOfYears"
                    }
                ],
                "returnType": "Array<number>",
                "jsdoctags": [
                    {
                        "name": "noOfYears",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [
            {
                "name": "State",
                "childs": [
                    {
                        "name": "NONE"
                    },
                    {
                        "name": "FAILED"
                    },
                    {
                        "name": "SUCCESS"
                    },
                    {
                        "name": "IN_PROGRESS"
                    },
                    {
                        "name": "SKIPPED"
                    },
                    {
                        "name": "WARNING"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/ui/state-progress/model/state.ts"
            },
            {
                "name": "TableSize",
                "childs": [
                    {
                        "name": "Small"
                    },
                    {
                        "name": "Medium"
                    },
                    {
                        "name": "Large"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/ui/models/table/tableSize.ts"
            }
        ],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/stories/badge.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/badge.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FilledGreen",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/badge.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FilledRed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/badge.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Green",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/badge.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Red",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/badge.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/badge.stories.ts",
                    "type": "Story<BadgeComponent>",
                    "defaultValue": "(args) => ({\n    props: args,\n})"
                }
            ],
            "src/stories/menu-button.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/menu-button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/menu-button.stories.ts",
                    "type": "Story<MenuButtonComponent>",
                    "defaultValue": "(args) => ({\n    props: args\n})"
                }
            ],
            "src/stories/inline-button-group.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inline-button-group.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inline-button-group.stories.ts",
                    "type": "Story<InlineButtonGroupComponent>",
                    "defaultValue": "(args) => ({\n    props: args\n})"
                }
            ],
            "src/stories/navigation-bar.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/navigation-bar.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/navigation-bar.stories.ts",
                    "type": "Story<NavigationBarComponent>",
                    "defaultValue": "(args) => ({\n    props: args,\n})"
                }
            ],
            "src/stories/page-header.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/page-header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/page-header.stories.ts",
                    "type": "Story<PageHeaderComponent>",
                    "defaultValue": "(args) => ({\n    props: args\n})"
                }
            ],
            "src/stories/show-json.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/show-json.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/show-json.stories.ts",
                    "type": "Story<ShowJsonComponent>",
                    "defaultValue": "(args) => ({\n    props: args\n})"
                }
            ],
            "src/stories/state-progress.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/state-progress.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/state-progress.stories.ts",
                    "type": "Story<StateProgressComponent>",
                    "defaultValue": "(args) => ({\n    props: args\n})"
                }
            ],
            "src/stories/table.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/table.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "header",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/table.stories.ts",
                    "type": "Array<TableHeader>",
                    "defaultValue": "[\n    { label: 'No.' },\n    { label: 'Name', isSortable: true },\n    { label: 'Kategorie', isGroupable: true },\n    { label: 'Adresse', isGroupable: true, isSortable: true },\n    { label: 'Hausnummer', isSortable: true },\n    { label: 'Gehalt', isSortable: true, summarizeWhenGrouped: true }\n]"
                },
                {
                    "name": "row",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/table.stories.ts",
                    "type": "",
                    "defaultValue": "new TableRow()"
                },
                {
                    "name": "row2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/table.stories.ts",
                    "type": "",
                    "defaultValue": "new TableRow()"
                },
                {
                    "name": "rows",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/table.stories.ts",
                    "type": "Array<TableRow>",
                    "defaultValue": "[]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/table.stories.ts",
                    "type": "Story<TableComponent>",
                    "defaultValue": "(args) => ({\n    props: args\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  apiUrl: \"http://192.168.178.129:4100/api\",\n  mockData: false\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  apiUrl: \"http://192.168.178.129:4100/api\",\n  mockData: false\n}"
                }
            ],
            "src/app/data/iconFactory.ts": [
                {
                    "name": "getIconWithName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/data/iconFactory.ts",
                    "type": "",
                    "defaultValue": "(name: string): string => {\n    switch (name) {\n        case 'plus-circle-line':\n            return '../assets/icons/plus-circle-line.svg';\n\n        case 'info-standard-line':\n            return '../assets/icons/info-standard-line.svg';\n\n        case 'home-line':\n            return '../assets/icons/home-line.svg';\n\n        case 'trash-line':\n            return \"../assets/icons/trash-line.svg\";\n            \n        case 'wallet-line':\n            return '../assets/icons/wallet-line.svg';\n        \n        case 'shield-line':\n            return '../assets/icons/shield-line.svg';\n            \n        case 'cog-line':\n            return '../assets/icons/cog-line.svg';\n\n        case 'times-circle-line':\n            return '../assets/icons/times-circle-line.svg';\n\n        case 'bar-chart-line':\n            return '../assets/icons/bar-chart-line.svg';\n        \n        case 'filter-line':\n            return '../assets/icons/filter-line.svg';\n\n        case 'filter-solid':\n            return '../assets/icons/filter-solid.svg';\n\n        case 'folder-line':\n            return '../assets/icons/folder-line.svg';\n\n        case 'folder-open-line':\n            return '../assets/icons/folder-open-line.svg';\n        \n        case 'briefcase-line':\n            return '../assets/icons/briefcase-line.svg';\n        \n        case 'pencil-line':\n            return '../assets/icons/pencil-line.svg';\n        \n        case 'slider-line':\n            return '../assets/icons/slider-line.svg';\n    \n        case 'user-line':\n            return '../assets/icons/user-line.svg';\n\n        default:\n            break;\n    }\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/util/getNYears.ts": [
                {
                    "name": "getNYears",
                    "file": "src/app/util/getNYears.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "noOfYears"
                        }
                    ],
                    "returnType": "Array<number>",
                    "jsdoctags": [
                        {
                            "name": "noOfYears",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/ui/state-progress/model/state.ts": [
                {
                    "name": "State",
                    "childs": [
                        {
                            "name": "NONE"
                        },
                        {
                            "name": "FAILED"
                        },
                        {
                            "name": "SUCCESS"
                        },
                        {
                            "name": "IN_PROGRESS"
                        },
                        {
                            "name": "SKIPPED"
                        },
                        {
                            "name": "WARNING"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/ui/state-progress/model/state.ts"
                }
            ],
            "src/app/ui/models/table/tableSize.ts": [
                {
                    "name": "TableSize",
                    "childs": [
                        {
                            "name": "Small"
                        },
                        {
                            "name": "Medium"
                        },
                        {
                            "name": "Large"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/ui/models/table/tableSize.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "/overview",
                        "pathMatch": "full"
                    },
                    {
                        "path": "overview",
                        "component": "OverviewComponent"
                    },
                    {
                        "path": "salary",
                        "component": "SalaryComponent"
                    },
                    {
                        "path": "insurance",
                        "component": "InsuranceComponent"
                    },
                    {
                        "path": "expenses",
                        "component": "ExpensesComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/insurance-add-entry/insurance-add-entry.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InsuranceAddEntryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/salary-add-entry/salary-add-entry.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SalaryAddEntryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/salary-chart/salary-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SalaryChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/salary-year-tile/salary-year-tile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SalaryYearTileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/data/gehaltTransformer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GehaltTransformer",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/app/data/iconFactory.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getIconWithName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modalModule/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modalModule/modal.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModalService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/expenses/expenses.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExpensesComponent",
                "coveragePercent": 16,
                "coverageCount": "6/37",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/insurance/insurance.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InsuranceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/overview/overview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OverviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/salary/salary.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SalaryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/37",
                "status": "low"
            },
            {
                "filePath": "src/app/services/api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApiService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/services/api.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HasId",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/models/ausgabe.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Ausgabe",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/services/models/gehalt.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Gehalt",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/services/models/interfaces/IDatum.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDatum",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/models/interfaces/IName.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IName",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/models/versicherung.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Versicherung",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/navigation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NavigationService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/badge/badge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BadgeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/inline-button-group/inline-button-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InlineButtonGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/menu-button/menu-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/models/inline-button-group/button.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Button",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/models/navigation-bar/INavigationItem.ts",
                "type": "class",
                "linktype": "classe",
                "name": "INavigationItem",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/models/navigation-bar/actionNavigationItem.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ActionNavigationItem",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/models/navigation-bar/linkNavigationItem.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LinkNavigationItem",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/models/navigation-bar/textNavigationItem.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TextNavigationItem",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/models/table/ITableCell.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITableCell",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/models/table/groupRow.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GroupRow",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/models/table/numberTableCell.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NumberTableCell",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/models/table/sortEntry.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SortEntry",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/models/table/styledTextTableCell.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StyledTextTableCell",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/models/table/tableHeader.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TableHeader",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/models/table/tableRow.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TableRow",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/models/table/tableRowAction.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TableRowAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/models/table/tableSpan.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TableSpan",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/models/table/textTableCell.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TextTableCell",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/navigation-bar/navigation-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/page-header/page-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/show-json/show-json.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShowJsonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/state-progress/model/defaultStateItem.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultStateItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/state-progress/model/numberStateItem.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NumberStateItem",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/state-progress/model/stateItem.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StateItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/state-progress/state-progress.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StateProgressComponent",
                "coveragePercent": 61,
                "coverageCount": "8/13",
                "status": "good"
            },
            {
                "filePath": "src/app/ui/sub-navigation/sub-navigation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SubNavigationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/util/arrayExtensions.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Array",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/util/dateExtensions.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Date",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/util/dictionary.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Dictionary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/util/getNYears.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getNYears",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/util/numberExtensions.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Number",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/util/objectDescriber.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Describer",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FilledGreen",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FilledRed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Green",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Red",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inline-button-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inline-button-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/menu-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/menu-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/navigation-bar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/navigation-bar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/page-header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/page-header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/show-json.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/show-json.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/state-progress.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/state-progress.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "header",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "row",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "row2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rows",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}